{
  "summary": {
    "files": 84,
    "total_loc": 13721,
    "total_sloc": 11913,
    "avg_loc": 163.3452380952381,
    "avg_complexity": 2.776735459662289,
    "max_complexity": 22,
    "avg_doc_ratio": 0.11768178712651765,
    "async_method_count": 6,
    "duplicate_fragment_count": 71
  },
  "issues": [
    {
      "priority": "P0",
      "type": "CyclicDependency",
      "message": "Cyclic namespace dependency detected: AssemblyChain.Core.Contact \u2192 AssemblyChain.Core.Contact.Detection.BroadPhase \u2192 AssemblyChain.Core.Model \u2192 AssemblyChain.Core.Toolkit.Utils \u2192 AssemblyChain.Core.Contact"
    },
    {
      "priority": "P0",
      "type": "CyclicDependency",
      "message": "Cyclic namespace dependency detected: AssemblyChain.Core.Model \u2192 AssemblyChain.Core.Toolkit.Utils \u2192 AssemblyChain.Core.Model"
    },
    {
      "priority": "P0",
      "type": "CyclicDependency",
      "message": "Cyclic namespace dependency detected: AssemblyChain.Core.Contact \u2192 AssemblyChain.Core.Contact.Detection.NarrowPhase \u2192 AssemblyChain.Core.Contact"
    },
    {
      "priority": "P0",
      "type": "CyclicDependency",
      "message": "Cyclic namespace dependency detected: AssemblyChain.Core.Contact \u2192 AssemblyChain.Core.Contact.Detection.NarrowPhase \u2192 AssemblyChain.Core.Toolkit.Geometry \u2192 AssemblyChain.Core.Contact"
    },
    {
      "priority": "P0",
      "type": "ExtremeComplexity",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:SolveInstance complexity 22."
    },
    {
      "priority": "P1",
      "type": "SharedHotspot",
      "message": "`AssemblyChain.Core.Domain.Entities` is a dependency hotspot with fan-in 11."
    },
    {
      "priority": "P1",
      "type": "SharedHotspot",
      "message": "`AssemblyChain.Core.Model` is a dependency hotspot with fan-in 10."
    },
    {
      "priority": "P1",
      "type": "LargeFile",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs exceeds 600 LOC (771 LOC)."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithIntersectionLines complexity 15."
    },
    {
      "priority": "P1",
      "type": "LongMethod",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithIntersectionLines spans 125 lines."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs:DetectCoplanarContacts complexity 16."
    },
    {
      "priority": "P1",
      "type": "LongMethod",
      "message": "AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs:DetectCoplanarContacts spans 120 lines."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Core/Toolkit/Mesh/MeshPreprocessor.cs:PreprocessMesh complexity 16."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Core/Toolkit/Utils/Tolerance.cs:ValidateSettings complexity 12."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreateAssembly.cs:SolveInstance complexity 12."
    },
    {
      "priority": "P1",
      "type": "LongMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:SolveInstance spans 163 lines."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs:DrawForeground complexity 17."
    },
    {
      "priority": "P1",
      "type": "HighComplexity",
      "message": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs:DrawForeground complexity 15."
    },
    {
      "priority": "P1",
      "type": "Duplication",
      "message": "Detected 71 duplicated fragments across modules."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Contact/ContactModel.cs:ContactModel lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/ContactModel.cs:ContactData defines 8 parameters."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:CreatePreset lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectMeshContactsEnhanced spans 86 lines."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:ValidateAndFilterContacts lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithTightInclusion defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithIntersectionLines defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithSimpleOverlap defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:ComputeEdgeContacts defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Contact/Detection/NarrowPhase/NarrowPhaseDetection.cs:DetectContactsForPair defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs:MaterialProperties defines 9 parameters."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Graph/ConstraintGraphBuilder.cs:BuildPartConstraints lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Graph/ConstraintGraphBuilder.cs:BuildGroupConstraints lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Model/AssemblyModel.cs:AssemblyModel lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Model/GraphModel.cs:GraphModel defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Model/SolverModel.cs:DgSolverModel defines 10 parameters."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Model/SolverModel.cs:ToAssemblySequence lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Solver/CSPSolver.cs:Solve lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Solver/MILPSolver.cs:Solve lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Solver/SATSolver.cs:Solve lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongParameterList",
      "message": "AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs:ComputeFaceIntersectionGeometry defines 6 parameters."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs:ComputeIntersection spans 81 lines."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Core/Toolkit/Math/Clustering.cs has sparse XML documentation (0.9%)."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Math/Clustering.cs:KMeans lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Math/Clustering.cs:InitializeKMeansPlusPlus lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Math/Clustering.cs:DBSCAN lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/MeshPreprocessor.cs:PreprocessMesh spans 117 lines."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs has sparse XML documentation (4.6%)."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs:ReduceVertices lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs:SmoothMesh lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs:CalculateFaceArea lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs has sparse XML documentation (3.3%)."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs:FillMeshHoles lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs:RemoveDuplicateFaces lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs:GroupNakedEdgesIntoLoops lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs:TryFillHole lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs:CheckDegenerateFaces lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs:CheckNormals lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs:CheckBoundingBox lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs:IsDegenerateFace lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs:SampleRaysEvenly lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Core/Toolkit/Utils/JsonSerializer.cs has sparse XML documentation (1.1%)."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Core/Toolkit/Utils/JsonSerializer.cs:Serialize lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/1_Property/AcGhDefinePhysicalProperty.cs:SolveInstance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreateAssembly.cs:SolveInstance spans 92 lines."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreateAssembly.cs:SolveInstance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs has sparse XML documentation (2.0%)."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:SolveInstance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:VariableParameterMaintenance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:UpdateInputParameters lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs:AppendAdditionalComponentMenuItems lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhBuildContactModel.cs:SolveInstance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhContactZones.cs:SolveInstance spans 91 lines."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhContactZones.cs:SolveInstance lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LowDocumentation",
      "message": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs has sparse XML documentation (0.0%)."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs:ApplySnapshot spans 80 lines."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs:ApplySnapshot lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs:DrawForeground lacks XML documentation."
    },
    {
      "priority": "P2",
      "type": "LongMethod",
      "message": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs:DrawForeground spans 83 lines."
    },
    {
      "priority": "P2",
      "type": "UndocumentedMethod",
      "message": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs:DrawForeground lacks XML documentation."
    }
  ],
  "recommendations": {
    "architecture": [
      "Break cyclic namespace dependencies via inversion (interfaces) or mediator services and enforce one-way references.",
      "Introduce fa\u00e7ade services around shared hotspots to reduce direct dependencies and protect domain boundaries."
    ],
    "module": [
      "Decompose oversized files into focused classes following single-responsibility principles.",
      "Factor repeated fragments into shared utilities or generics to eliminate duplication across modules."
    ],
    "function": [
      "Introduce parameter objects or configuration records to shrink long parameter lists.",
      "Refactor high-complexity methods using guard clauses, extraction, and descriptive helpers to flatten nesting.",
      "Split long methods around distinct responsibilities and favour pipelines or smaller private helpers."
    ],
    "engineering": [
      "Add regression tests around identified hotspots before refactoring to protect behaviour.",
      "Automate this audit via CI to monitor metric drift and enforce agreed quality gates.",
      "Raise documentation coverage by requiring XML summaries for public APIs and critical workflows."
    ]
  },
  "data": {
    "files": [
      {
        "path": "AssemblyChain.Core/Contact/ContactGraphBuilder.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 96,
        "sloc": 83,
        "doc_lines": 6,
        "classes": [
          "ContactGraphBuilder"
        ],
        "methods": [
          {
            "name": "BuildGraph",
            "parameters": 2,
            "complexity": 4,
            "length": 33,
            "doc_present": true,
            "start_line": 19,
            "end_line": 51,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryParsePartIndex",
            "parameters": 2,
            "complexity": 2,
            "length": 9,
            "doc_present": false,
            "start_line": 54,
            "end_line": 62,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateInDegrees",
            "parameters": 1,
            "complexity": 4,
            "length": 13,
            "doc_present": false,
            "start_line": 64,
            "end_line": 76,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindStronglyConnectedComponents",
            "parameters": 1,
            "complexity": 2,
            "length": 14,
            "doc_present": false,
            "start_line": 78,
            "end_line": 91,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Graph",
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/ContactModel.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 250,
        "sloc": 217,
        "doc_lines": 75,
        "classes": [
          "ContactModel",
          "ContactData",
          "ContactPair",
          "ContactZone",
          "ContactPlane",
          "MotionConstraint",
          "ContactAnalysisResult",
          "ContactRelation"
        ],
        "methods": [
          {
            "name": "ContactModel",
            "parameters": 2,
            "complexity": 5,
            "length": 41,
            "doc_present": false,
            "start_line": 21,
            "end_line": 61,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryParsePartIndex",
            "parameters": 2,
            "complexity": 2,
            "length": 7,
            "doc_present": false,
            "start_line": 63,
            "end_line": 69,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetContactsForPart",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 71,
            "end_line": 75,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetContactsBetweenParts",
            "parameters": 2,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 77,
            "end_line": 84,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContactData",
            "parameters": 8,
            "complexity": 1,
            "length": 31,
            "doc_present": true,
            "start_line": 91,
            "end_line": 121,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 117,
            "end_line": 120,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContactPair",
            "parameters": 5,
            "complexity": 1,
            "length": 15,
            "doc_present": true,
            "start_line": 126,
            "end_line": 140,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 136,
            "end_line": 139,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContactZone",
            "parameters": 4,
            "complexity": 2,
            "length": 12,
            "doc_present": true,
            "start_line": 156,
            "end_line": 167,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 2,
            "length": 6,
            "doc_present": true,
            "start_line": 161,
            "end_line": 166,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContactPlane",
            "parameters": 3,
            "complexity": 1,
            "length": 10,
            "doc_present": true,
            "start_line": 172,
            "end_line": 181,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 177,
            "end_line": 180,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MotionConstraint",
            "parameters": 3,
            "complexity": 1,
            "length": 10,
            "doc_present": true,
            "start_line": 186,
            "end_line": 195,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 191,
            "end_line": 194,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContactRelation",
            "parameters": 5,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 238,
            "end_line": 245,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "loc": 202,
        "sloc": 170,
        "doc_lines": 31,
        "classes": [
          "RTreeBroadPhase",
          "RTreeOptions",
          "RTreeResult"
        ],
        "methods": [
          {
            "name": "Execute",
            "parameters": 2,
            "complexity": 7,
            "length": 61,
            "doc_present": true,
            "start_line": 39,
            "end_line": 99,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateRTree",
            "parameters": 2,
            "complexity": 3,
            "length": 15,
            "doc_present": true,
            "start_line": 104,
            "end_line": 118,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExpandBoundingBox",
            "parameters": 2,
            "complexity": 2,
            "length": 21,
            "doc_present": true,
            "start_line": 123,
            "end_line": 143,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnMeshes",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 148,
            "end_line": 152,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnBreps",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 157,
            "end_line": 161,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnGeometry",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 166,
            "end_line": 170,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteWithCustomBoxes",
            "parameters": 3,
            "complexity": 2,
            "length": 23,
            "doc_present": true,
            "start_line": 175,
            "end_line": 197,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "loc": 274,
        "sloc": 241,
        "doc_lines": 52,
        "classes": [
          "BroadPhaseFactory",
          "SweepAndPruneAlgorithm",
          "RTreeAlgorithm",
          "SweepAndPrune",
          "SapOptions",
          "SapResult",
          "Endpoint"
        ],
        "methods": [
          {
            "name": "Create",
            "parameters": 1,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 18,
            "end_line": 26,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Execute",
            "parameters": 2,
            "complexity": 6,
            "length": 65,
            "doc_present": true,
            "start_line": 102,
            "end_line": 166,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateEndpoints",
            "parameters": 3,
            "complexity": 7,
            "length": 43,
            "doc_present": true,
            "start_line": 171,
            "end_line": 213,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnMeshes",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 228,
            "end_line": 232,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnBreps",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 237,
            "end_line": 241,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnGeometry",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 246,
            "end_line": 250,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExecuteOnParts",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 255,
            "end_line": 259,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/ContactDetection.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 116,
        "sloc": 95,
        "doc_lines": 9,
        "classes": [
          "ContactDetection"
        ],
        "methods": [
          {
            "name": "DetectContacts",
            "parameters": 2,
            "complexity": 4,
            "length": 50,
            "doc_present": true,
            "start_line": 20,
            "end_line": 69,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectContacts",
            "parameters": 2,
            "complexity": 5,
            "length": 41,
            "doc_present": true,
            "start_line": 74,
            "end_line": 114,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Contact.Detection.BroadPhase",
          "AssemblyChain.Core.Contact.Detection.NarrowPhase"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/DetectionOptions.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 50,
        "sloc": 44,
        "doc_lines": 6,
        "classes": [
          "DetectionOptions",
          "ContactDetectionConstants"
        ],
        "methods": [],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 58,
        "sloc": 49,
        "doc_lines": 6,
        "classes": [
          "BrepContactDetector"
        ],
        "methods": [
          {
            "name": "DetectBrepContacts",
            "parameters": 3,
            "complexity": 4,
            "length": 37,
            "doc_present": true,
            "start_line": 20,
            "end_line": 56,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "AssemblyChain.Core.Toolkit"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 771,
        "sloc": 643,
        "doc_lines": 52,
        "classes": [
          "MeshContactDetector",
          "EnhancedDetectionOptions",
          "MeshContactTestUtilities"
        ],
        "methods": [
          {
            "name": "CreatePreset",
            "parameters": 1,
            "complexity": 2,
            "length": 37,
            "doc_present": false,
            "start_line": 52,
            "end_line": 88,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Sanitize",
            "parameters": 0,
            "complexity": 1,
            "length": 14,
            "doc_present": false,
            "start_line": 90,
            "end_line": 103,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectMeshContactsEnhanced",
            "parameters": 3,
            "complexity": 7,
            "length": 86,
            "doc_present": true,
            "start_line": 115,
            "end_line": 200,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectMeshContacts",
            "parameters": 3,
            "complexity": 1,
            "length": 12,
            "doc_present": true,
            "start_line": 205,
            "end_line": 216,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateInputs",
            "parameters": 4,
            "complexity": 4,
            "length": 24,
            "doc_present": false,
            "start_line": 218,
            "end_line": 241,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateAndFilterContacts",
            "parameters": 3,
            "complexity": 7,
            "length": 34,
            "doc_present": false,
            "start_line": 243,
            "end_line": 276,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectContactsWithTightInclusion",
            "parameters": 6,
            "complexity": 6,
            "length": 71,
            "doc_present": true,
            "start_line": 285,
            "end_line": 355,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectContactsWithIntersectionLines",
            "parameters": 6,
            "complexity": 15,
            "length": 125,
            "doc_present": true,
            "start_line": 360,
            "end_line": 484,
            "max_nesting": 9,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectContactsWithSimpleOverlap",
            "parameters": 6,
            "complexity": 4,
            "length": 46,
            "doc_present": true,
            "start_line": 489,
            "end_line": 534,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GroupCurvesByConnectivity",
            "parameters": 2,
            "complexity": 6,
            "length": 28,
            "doc_present": true,
            "start_line": 543,
            "end_line": 570,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreCurvesConnected",
            "parameters": 3,
            "complexity": 1,
            "length": 10,
            "doc_present": true,
            "start_line": 575,
            "end_line": 584,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeContactRegions",
            "parameters": 5,
            "complexity": 4,
            "length": 38,
            "doc_present": true,
            "start_line": 592,
            "end_line": 629,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeEdgeContacts",
            "parameters": 6,
            "complexity": 5,
            "length": 39,
            "doc_present": true,
            "start_line": 634,
            "end_line": 672,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateTestCube",
            "parameters": 2,
            "complexity": 1,
            "length": 29,
            "doc_present": true,
            "start_line": 687,
            "end_line": 715,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RunBasicContactTest",
            "parameters": 2,
            "complexity": 2,
            "length": 17,
            "doc_present": true,
            "start_line": 720,
            "end_line": 736,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RunPerformanceTest",
            "parameters": 2,
            "complexity": 2,
            "length": 26,
            "doc_present": true,
            "start_line": 741,
            "end_line": 766,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "AssemblyChain.Core.Toolkit",
          "AssemblyChain.Core.Toolkit.Mesh",
          "AssemblyChain.Core.Toolkit.Utils",
          "AssemblyChain.Core.Toolkit.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 117,
        "sloc": 102,
        "doc_lines": 9,
        "classes": [
          "MixedGeoContactDetector"
        ],
        "methods": [
          {
            "name": "DetectMixedGeoContacts",
            "parameters": 3,
            "complexity": 4,
            "length": 53,
            "doc_present": true,
            "start_line": 20,
            "end_line": 72,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetProcessedMesh",
            "parameters": 2,
            "complexity": 6,
            "length": 39,
            "doc_present": true,
            "start_line": 77,
            "end_line": 115,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "AssemblyChain.Core.Toolkit"
        ]
      },
      {
        "path": "AssemblyChain.Core/Contact/Detection/NarrowPhase/NarrowPhaseDetection.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 78,
        "sloc": 66,
        "doc_lines": 6,
        "classes": [
          "NarrowPhaseDetection"
        ],
        "methods": [
          {
            "name": "DetectContactsForPair",
            "parameters": 6,
            "complexity": 4,
            "length": 52,
            "doc_present": true,
            "start_line": 20,
            "end_line": 71,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 51,
            "end_line": 55,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectContact",
            "parameters": 2,
            "complexity": 1,
            "length": 2,
            "doc_present": false,
            "start_line": 73,
            "end_line": 74,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Common/Entity.cs",
        "namespace": "AssemblyChain.Core.Domain.Common",
        "loc": 49,
        "sloc": 38,
        "doc_lines": 6,
        "classes": [
          "for",
          "Entity"
        ],
        "methods": [
          {
            "name": "Entity",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 15,
            "end_line": 18,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Equals",
            "parameters": 1,
            "complexity": 4,
            "length": 13,
            "doc_present": false,
            "start_line": 20,
            "end_line": 32,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetHashCode",
            "parameters": 0,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 34,
            "end_line": 34,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Domain/Common/ValueObject.cs",
        "namespace": "AssemblyChain.Core.Domain.Common",
        "loc": 56,
        "sloc": 42,
        "doc_lines": 3,
        "classes": [
          "for",
          "ValueObject"
        ],
        "methods": [
          {
            "name": "Equals",
            "parameters": 1,
            "complexity": 3,
            "length": 12,
            "doc_present": false,
            "start_line": 14,
            "end_line": 25,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetHashCode",
            "parameters": 0,
            "complexity": 1,
            "length": 11,
            "doc_present": false,
            "start_line": 27,
            "end_line": 37,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 238,
        "sloc": 202,
        "doc_lines": 63,
        "classes": [
          "Assembly"
        ],
        "methods": [
          {
            "name": "UpdateName",
            "parameters": 1,
            "complexity": 2,
            "length": 7,
            "doc_present": true,
            "start_line": 98,
            "end_line": 104,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateDescription",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 109,
            "end_line": 112,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddPart",
            "parameters": 1,
            "complexity": 3,
            "length": 10,
            "doc_present": true,
            "start_line": 117,
            "end_line": 126,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemovePart",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 131,
            "end_line": 134,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemovePart",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 139,
            "end_line": 143,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddSubAssembly",
            "parameters": 1,
            "complexity": 3,
            "length": 7,
            "doc_present": true,
            "start_line": 148,
            "end_line": 154,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemoveSubAssembly",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 159,
            "end_line": 162,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetPart",
            "parameters": 1,
            "complexity": 4,
            "length": 15,
            "doc_present": true,
            "start_line": 167,
            "end_line": 181,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetAllParts",
            "parameters": 0,
            "complexity": 4,
            "length": 11,
            "doc_present": true,
            "start_line": 186,
            "end_line": 196,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetPhysicsParts",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 201,
            "end_line": 204,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsValid",
            "parameters": 0,
            "complexity": 2,
            "length": 10,
            "doc_present": true,
            "start_line": 209,
            "end_line": 218,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "HasCircularReference",
            "parameters": 1,
            "complexity": 4,
            "length": 14,
            "doc_present": false,
            "start_line": 220,
            "end_line": 233,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Entities/Joint.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 145,
        "sloc": 121,
        "doc_lines": 51,
        "classes": [
          "Joint",
          "JointLimits"
        ],
        "methods": [
          {
            "name": "Activate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 65,
            "end_line": 68,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Deactivate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 73,
            "end_line": 76,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "InvolvesPart",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 81,
            "end_line": 84,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetOtherPart",
            "parameters": 1,
            "complexity": 3,
            "length": 6,
            "doc_present": true,
            "start_line": 89,
            "end_line": 94,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "JointLimits",
            "parameters": 2,
            "complexity": 2,
            "length": 8,
            "doc_present": false,
            "start_line": 129,
            "end_line": 136,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common",
          "AssemblyChain.Core.Domain.Entities",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Entities/Part.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 174,
        "sloc": 148,
        "doc_lines": 63,
        "classes": [
          "Part"
        ],
        "methods": [
          {
            "name": "UpdateName",
            "parameters": 1,
            "complexity": 2,
            "length": 7,
            "doc_present": true,
            "start_line": 102,
            "end_line": 108,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateGeometry",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 113,
            "end_line": 116,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdatePhysics",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 121,
            "end_line": 124,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateMaterial",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 129,
            "end_line": 132,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WithPhysics",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 137,
            "end_line": 140,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WithMaterial",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 145,
            "end_line": 148,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common",
          "AssemblyChain.Core.Domain.ValueObjects"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Interfaces/IAssemblyService.cs",
        "namespace": "AssemblyChain.Core.Domain.Interfaces",
        "loc": 81,
        "sloc": 71,
        "doc_lines": 33,
        "classes": [
          "AssemblyValidationResult",
          "AssemblyProperties",
          "CollisionInfo"
        ],
        "methods": [],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Interfaces/IPartRepository.cs",
        "namespace": "AssemblyChain.Core.Domain.Interfaces",
        "loc": 57,
        "sloc": 48,
        "doc_lines": 30,
        "classes": [],
        "methods": [],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/Services/DomainServices.cs",
        "namespace": "AssemblyChain.Core.Domain.Services",
        "loc": 303,
        "sloc": 256,
        "doc_lines": 33,
        "classes": [
          "DomainServices",
          "DisassemblyAnalysis",
          "AssemblySequence",
          "AssemblyStep",
          "ValidationResult",
          "StabilityAnalysis"
        ],
        "methods": [
          {
            "name": "DomainServices",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 20,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AnalyzeDisassemblySequenceAsync",
            "parameters": 2,
            "complexity": 4,
            "length": 29,
            "doc_present": true,
            "start_line": 29,
            "end_line": 57,
            "max_nesting": 3,
            "is_async": true,
            "await_count": 1
          },
          {
            "name": "FindBlockingPartsAsync",
            "parameters": 3,
            "complexity": 4,
            "length": 18,
            "doc_present": true,
            "start_line": 62,
            "end_line": 79,
            "max_nesting": 4,
            "is_async": true,
            "await_count": 1
          },
          {
            "name": "CalculateOptimalSequenceAsync",
            "parameters": 1,
            "complexity": 5,
            "length": 36,
            "doc_present": true,
            "start_line": 84,
            "end_line": 119,
            "max_nesting": 4,
            "is_async": true,
            "await_count": 1
          },
          {
            "name": "ValidatePart",
            "parameters": 1,
            "complexity": 5,
            "length": 34,
            "doc_present": true,
            "start_line": 124,
            "end_line": 157,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AnalyzeStabilityAsync",
            "parameters": 1,
            "complexity": 2,
            "length": 25,
            "doc_present": true,
            "start_line": 162,
            "end_line": 186,
            "max_nesting": 2,
            "is_async": true,
            "await_count": 0
          },
          {
            "name": "PartsIntersectAsync",
            "parameters": 2,
            "complexity": 1,
            "length": 10,
            "doc_present": false,
            "start_line": 188,
            "end_line": 197,
            "max_nesting": 1,
            "is_async": true,
            "await_count": 0
          },
          {
            "name": "IsBlocking",
            "parameters": 2,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 199,
            "end_line": 206,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateCenterOfMass",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 208,
            "end_line": 212,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateSupportPolygon",
            "parameters": 1,
            "complexity": 2,
            "length": 16,
            "doc_present": false,
            "start_line": 214,
            "end_line": 229,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddError",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 241,
            "end_line": 241,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddStep",
            "parameters": 3,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 253,
            "end_line": 256,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddError",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 258,
            "end_line": 258,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AssemblyStep",
            "parameters": 3,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 270,
            "end_line": 275,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddError",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 288,
            "end_line": 288,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddWarning",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 289,
            "end_line": 289,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 3,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Domain.Interfaces",
          "AssemblyChain.Core.Domain.ValueObjects",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 93,
        "sloc": 79,
        "doc_lines": 30,
        "classes": [
          "MaterialProperties"
        ],
        "methods": [
          {
            "name": "MaterialProperties",
            "parameters": 9,
            "complexity": 1,
            "length": 14,
            "doc_present": false,
            "start_line": 57,
            "end_line": 70,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "complexity": 1,
            "length": 12,
            "doc_present": false,
            "start_line": 72,
            "end_line": 83,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/ValueObjects/PartGeometry.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 89,
        "sloc": 76,
        "doc_lines": 33,
        "classes": [
          "PartGeometry"
        ],
        "methods": [
          {
            "name": "PartGeometry",
            "parameters": 2,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 51,
            "end_line": 59,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PartGeometry",
            "parameters": 5,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 64,
            "end_line": 72,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 79,
            "end_line": 85,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Domain/ValueObjects/PhysicsProperties.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 61,
        "sloc": 51,
        "doc_lines": 18,
        "classes": [
          "PhysicsProperties"
        ],
        "methods": [
          {
            "name": "PhysicsProperties",
            "parameters": 5,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 37,
            "end_line": 45,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 47,
            "end_line": 54,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Common"
        ]
      },
      {
        "path": "AssemblyChain.Core/Graph/ConstraintGraphBuilder.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 139,
        "sloc": 113,
        "doc_lines": 6,
        "classes": [
          "ConstraintGraphBuilder"
        ],
        "methods": [
          {
            "name": "BuildConstraints",
            "parameters": 2,
            "complexity": 1,
            "length": 21,
            "doc_present": true,
            "start_line": 17,
            "end_line": 37,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BuildPartConstraints",
            "parameters": 2,
            "complexity": 3,
            "length": 35,
            "doc_present": false,
            "start_line": 39,
            "end_line": 73,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BuildGroupConstraints",
            "parameters": 2,
            "complexity": 5,
            "length": 44,
            "doc_present": false,
            "start_line": 75,
            "end_line": 118,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CheckExternalBlocking",
            "parameters": 2,
            "complexity": 3,
            "length": 15,
            "doc_present": false,
            "start_line": 120,
            "end_line": 134,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Graph/GNNAnalyzer.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 583,
        "sloc": 494,
        "doc_lines": 55,
        "classes": [
          "GNNAnalyzer",
          "NodeFeatures",
          "GNNAnalysisResult"
        ],
        "methods": [
          {
            "name": "Analyze",
            "parameters": 3,
            "complexity": 3,
            "length": 30,
            "doc_present": true,
            "start_line": 25,
            "end_line": 54,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateAnalysis",
            "parameters": 4,
            "complexity": 10,
            "length": 60,
            "doc_present": true,
            "start_line": 59,
            "end_line": 118,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "InitializeNodeFeatures",
            "parameters": 3,
            "complexity": 4,
            "length": 43,
            "doc_present": true,
            "start_line": 123,
            "end_line": 165,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateNodeFeatures",
            "parameters": 3,
            "complexity": 1,
            "length": 7,
            "doc_present": true,
            "start_line": 170,
            "end_line": 176,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateNodeFeaturesIncrementally",
            "parameters": 4,
            "complexity": 10,
            "length": 64,
            "doc_present": true,
            "start_line": 181,
            "end_line": 244,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateMessage",
            "parameters": 3,
            "complexity": 1,
            "length": 14,
            "doc_present": true,
            "start_line": 249,
            "end_line": 262,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "HasConverged",
            "parameters": 2,
            "complexity": 3,
            "length": 16,
            "doc_present": true,
            "start_line": 267,
            "end_line": 282,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeSingleScores",
            "parameters": 2,
            "complexity": 2,
            "length": 13,
            "doc_present": true,
            "start_line": 287,
            "end_line": 299,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeSingleScore",
            "parameters": 1,
            "complexity": 1,
            "length": 11,
            "doc_present": true,
            "start_line": 304,
            "end_line": 314,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculatePairAffinity",
            "parameters": 4,
            "complexity": 4,
            "length": 40,
            "doc_present": true,
            "start_line": 398,
            "end_line": 437,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 422,
            "end_line": 425,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateSurfaceArea",
            "parameters": 1,
            "complexity": 4,
            "length": 29,
            "doc_present": true,
            "start_line": 442,
            "end_line": 470,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateExposureScore",
            "parameters": 3,
            "complexity": 7,
            "length": 42,
            "doc_present": true,
            "start_line": 475,
            "end_line": 516,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Clone",
            "parameters": 0,
            "complexity": 1,
            "length": 13,
            "doc_present": false,
            "start_line": 532,
            "end_line": 544,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GNNAnalysisResult",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 556,
            "end_line": 559,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Graph/GraphOptions.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 14,
        "sloc": 12,
        "doc_lines": 3,
        "classes": [
          "struct"
        ],
        "methods": [],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Graph/GraphViews.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 76,
        "sloc": 62,
        "doc_lines": 0,
        "classes": [
          "namespace",
          "GraphViews",
          "Dbg",
          "BlockingEdge",
          "DirectionalBlockingGraph",
          "AssemblyGraph",
          "Node"
        ],
        "methods": [
          {
            "name": "BuildDbgForDirections",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 13,
            "end_line": 17,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "StronglyCoupledSets",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 19,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BlockingEdge",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 30,
            "end_line": 34,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindConnectedComponents",
            "parameters": 1,
            "complexity": 1,
            "length": 2,
            "doc_present": false,
            "start_line": 41,
            "end_line": 42,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetBlockers",
            "parameters": 1,
            "complexity": 1,
            "length": 2,
            "doc_present": false,
            "start_line": 44,
            "end_line": 45,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetBlockedParts",
            "parameters": 1,
            "complexity": 1,
            "length": 2,
            "doc_present": false,
            "start_line": 47,
            "end_line": 48,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetAllPartIds",
            "parameters": 0,
            "complexity": 1,
            "length": 2,
            "doc_present": false,
            "start_line": 50,
            "end_line": 51,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetBlockingScore",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 53,
            "end_line": 53,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Node",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 61,
            "end_line": 61,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AssemblyGraph",
            "parameters": 2,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 67,
            "end_line": 73,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Model/AssemblyModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 86,
        "sloc": 73,
        "doc_lines": 25,
        "classes": [
          "AssemblyModel"
        ],
        "methods": [
          {
            "name": "AssemblyModel",
            "parameters": 3,
            "complexity": 4,
            "length": 32,
            "doc_present": false,
            "start_line": 50,
            "end_line": 81,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Model/AssemblyModelFactory.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 42,
        "sloc": 39,
        "doc_lines": 9,
        "classes": [
          "AssemblyModelFactory"
        ],
        "methods": [
          {
            "name": "Create",
            "parameters": 1,
            "complexity": 2,
            "length": 12,
            "doc_present": true,
            "start_line": 21,
            "end_line": 32,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MaterializeParts",
            "parameters": 1,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 34,
            "end_line": 40,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Toolkit.Utils"
        ]
      },
      {
        "path": "AssemblyChain.Core/Model/ConstraintModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 72,
        "sloc": 62,
        "doc_lines": 4,
        "classes": [
          "ConstraintModel"
        ],
        "methods": [
          {
            "name": "ConstraintModel",
            "parameters": 5,
            "complexity": 1,
            "length": 13,
            "doc_present": false,
            "start_line": 20,
            "end_line": 32,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetPartConstraints",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 34,
            "end_line": 37,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetGroupConstraints",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 39,
            "end_line": 42,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetGroupConstraints",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 44,
            "end_line": 49,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanPartMove",
            "parameters": 3,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 51,
            "end_line": 56,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanGroupMove",
            "parameters": 3,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 58,
            "end_line": 67,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Model/GraphModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 82,
        "sloc": 73,
        "doc_lines": 4,
        "classes": [
          "GraphModel",
          "BlockingGraph",
          "NonDirectionalBlockingGraph",
          "BlockingEdge",
          "StronglyConnectedComponent"
        ],
        "methods": [
          {
            "name": "GraphModel",
            "parameters": 6,
            "complexity": 1,
            "length": 15,
            "doc_present": false,
            "start_line": 25,
            "end_line": 39,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetInDegree",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 41,
            "end_line": 44,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFreeParts",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 46,
            "end_line": 49,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetComponentForNode",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 51,
            "end_line": 54,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreInSameComponent",
            "parameters": 2,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 56,
            "end_line": 61,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "StronglyConnectedComponent",
            "parameters": 0,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 73,
            "end_line": 73,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "StronglyConnectedComponent",
            "parameters": 3,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 74,
            "end_line": 79,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Model/MotionModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 86,
        "sloc": 72,
        "doc_lines": 4,
        "classes": [
          "MotionModel"
        ],
        "methods": [
          {
            "name": "MotionModel",
            "parameters": 3,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 20,
            "end_line": 28,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetPartMotionRays",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 30,
            "end_line": 33,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetGroupMotionRays",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 35,
            "end_line": 40,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetGroupMotionRays",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 42,
            "end_line": 45,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsMotionFeasible",
            "parameters": 3,
            "complexity": 4,
            "length": 12,
            "doc_present": false,
            "start_line": 47,
            "end_line": 58,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsGroupMotionFeasible",
            "parameters": 3,
            "complexity": 4,
            "length": 12,
            "doc_present": false,
            "start_line": 60,
            "end_line": 71,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetAllGroupKeys",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 73,
            "end_line": 76,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ParseGroupKey",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 78,
            "end_line": 81,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Model/SolverModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 131,
        "sloc": 117,
        "doc_lines": 4,
        "classes": [
          "DgSolverModel",
          "Step"
        ],
        "methods": [
          {
            "name": "DgSolverModel",
            "parameters": 10,
            "complexity": 2,
            "length": 25,
            "doc_present": false,
            "start_line": 27,
            "end_line": 51,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetStep",
            "parameters": 1,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 53,
            "end_line": 58,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetVector",
            "parameters": 1,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 60,
            "end_line": 65,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToAssemblySequence",
            "parameters": 0,
            "complexity": 4,
            "length": 37,
            "doc_present": false,
            "start_line": 67,
            "end_line": 103,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetSummary",
            "parameters": 0,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 105,
            "end_line": 110,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Step",
            "parameters": 3,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 116,
            "end_line": 121,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Motion/ConeIntersection.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 58,
        "sloc": 51,
        "doc_lines": 15,
        "classes": [
          "ConeIntersection"
        ],
        "methods": [
          {
            "name": "IsPointInHalfspace",
            "parameters": 3,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 16,
            "end_line": 20,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "complexity": 4,
            "length": 10,
            "doc_present": true,
            "start_line": 25,
            "end_line": 34,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 39,
            "end_line": 42,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeExtremeRays",
            "parameters": 2,
            "complexity": 1,
            "length": 7,
            "doc_present": true,
            "start_line": 47,
            "end_line": 53,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 123,
        "sloc": 101,
        "doc_lines": 6,
        "classes": [
          "MotionEvaluator"
        ],
        "methods": [
          {
            "name": "EvaluateMotion",
            "parameters": 2,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 18,
            "end_line": 26,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputePartMotionRays",
            "parameters": 2,
            "complexity": 2,
            "length": 15,
            "doc_present": false,
            "start_line": 28,
            "end_line": 42,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeMotionRaysForPart",
            "parameters": 3,
            "complexity": 3,
            "length": 16,
            "doc_present": false,
            "start_line": 44,
            "end_line": 59,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeGroupMotionRays",
            "parameters": 2,
            "complexity": 3,
            "length": 18,
            "doc_present": false,
            "start_line": 61,
            "end_line": 78,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeMotionRaysForGroup",
            "parameters": 3,
            "complexity": 4,
            "length": 19,
            "doc_present": false,
            "start_line": 80,
            "end_line": 98,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateCombinations",
            "parameters": 2,
            "complexity": 7,
            "length": 19,
            "doc_present": false,
            "start_line": 100,
            "end_line": 118,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Motion/MotionOptions.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 15,
        "sloc": 13,
        "doc_lines": 3,
        "classes": [
          "struct"
        ],
        "methods": [],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Motion/PoseEstimator.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 26,
        "sloc": 22,
        "doc_lines": 0,
        "classes": [
          "PoseEstimator"
        ],
        "methods": [
          {
            "name": "PoseEstimator",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 12,
            "end_line": 16,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateCandidates",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 18,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Motion/PoseTypes.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 16,
        "sloc": 14,
        "doc_lines": 0,
        "classes": [
          "PoseCandidate"
        ],
        "methods": [
          {
            "name": "PoseCandidate",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 9,
            "end_line": 13,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Solver/CSPSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 72,
        "sloc": 65,
        "doc_lines": 4,
        "classes": [
          "CSPsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "complexity": 2,
            "length": 47,
            "doc_present": false,
            "start_line": 22,
            "end_line": 68,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Solver/MILPSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 65,
        "sloc": 59,
        "doc_lines": 4,
        "classes": [
          "MILPsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "complexity": 2,
            "length": 45,
            "doc_present": false,
            "start_line": 17,
            "end_line": 61,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Solver/SATSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 65,
        "sloc": 59,
        "doc_lines": 4,
        "classes": [
          "SATsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "complexity": 2,
            "length": 45,
            "doc_present": false,
            "start_line": 17,
            "end_line": 61,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Solver/SolverOptions.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 29,
        "sloc": 26,
        "doc_lines": 6,
        "classes": [
          "struct"
        ],
        "methods": [],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Toolkit/BBox/BoundingHelpers.cs",
        "namespace": "AssemblyChain.Core.Toolkit.BBox",
        "loc": 287,
        "sloc": 254,
        "doc_lines": 48,
        "classes": [
          "BoundingHelpers",
          "ExpansionOptions",
          "VoxelOptions"
        ],
        "methods": [
          {
            "name": "ExpandBoundingBox",
            "parameters": 2,
            "complexity": 3,
            "length": 32,
            "doc_present": true,
            "start_line": 40,
            "end_line": 71,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IntersectBoundingBoxes",
            "parameters": 1,
            "complexity": 5,
            "length": 22,
            "doc_present": true,
            "start_line": 76,
            "end_line": 97,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UnionBoundingBoxes",
            "parameters": 1,
            "complexity": 5,
            "length": 22,
            "doc_present": true,
            "start_line": 102,
            "end_line": 123,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxesIntersect",
            "parameters": 3,
            "complexity": 2,
            "length": 11,
            "doc_present": true,
            "start_line": 128,
            "end_line": 138,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxSurfaceArea",
            "parameters": 1,
            "complexity": 2,
            "length": 6,
            "doc_present": true,
            "start_line": 143,
            "end_line": 148,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxVolume",
            "parameters": 1,
            "complexity": 2,
            "length": 6,
            "doc_present": true,
            "start_line": 153,
            "end_line": 158,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "VoxelizeBoundingBox",
            "parameters": 2,
            "complexity": 7,
            "length": 43,
            "doc_present": true,
            "start_line": 163,
            "end_line": 205,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsOnBoundary",
            "parameters": 3,
            "complexity": 1,
            "length": 8,
            "doc_present": true,
            "start_line": 210,
            "end_line": 217,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateBoundingBox",
            "parameters": 1,
            "complexity": 3,
            "length": 10,
            "doc_present": true,
            "start_line": 222,
            "end_line": 231,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxCenter",
            "parameters": 1,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 236,
            "end_line": 244,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxSize",
            "parameters": 1,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 249,
            "end_line": 257,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ContainsPoint",
            "parameters": 3,
            "complexity": 2,
            "length": 7,
            "doc_present": true,
            "start_line": 262,
            "end_line": 268,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxAspectRatio",
            "parameters": 1,
            "complexity": 3,
            "length": 10,
            "doc_present": true,
            "start_line": 273,
            "end_line": 282,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Brep",
        "loc": 302,
        "sloc": 259,
        "doc_lines": 39,
        "classes": [
          "BrepUtilities",
          "BrepOptions",
          "ProcessingResult"
        ],
        "methods": [
          {
            "name": "ProcessBrep",
            "parameters": 2,
            "complexity": 9,
            "length": 61,
            "doc_present": true,
            "start_line": 41,
            "end_line": 101,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SplitIntersectingFaces",
            "parameters": 2,
            "complexity": 2,
            "length": 15,
            "doc_present": true,
            "start_line": 106,
            "end_line": 120,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MergeCoplanarFaces",
            "parameters": 2,
            "complexity": 9,
            "length": 39,
            "doc_present": true,
            "start_line": 125,
            "end_line": 163,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreCoplanar",
            "parameters": 3,
            "complexity": 2,
            "length": 12,
            "doc_present": true,
            "start_line": 168,
            "end_line": 179,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreAdjacentFaces",
            "parameters": 3,
            "complexity": 4,
            "length": 18,
            "doc_present": true,
            "start_line": 184,
            "end_line": 201,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectClosureIssues",
            "parameters": 2,
            "complexity": 4,
            "length": 18,
            "doc_present": true,
            "start_line": 206,
            "end_line": 223,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "HasSelfIntersections",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 228,
            "end_line": 232,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MergeBreps",
            "parameters": 2,
            "complexity": 5,
            "length": 24,
            "doc_present": true,
            "start_line": 246,
            "end_line": 269,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExtractFaces",
            "parameters": 1,
            "complexity": 5,
            "length": 23,
            "doc_present": true,
            "start_line": 274,
            "end_line": 296,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Brep",
        "loc": 496,
        "sloc": 415,
        "doc_lines": 36,
        "classes": [
          "PlanarOps",
          "PlanarOptions",
          "PlanarResult",
          "PlaneComparer",
          "CoplanarContactResult"
        ],
        "methods": [
          {
            "name": "ExtractPlanarFaces",
            "parameters": 2,
            "complexity": 7,
            "length": 50,
            "doc_present": true,
            "start_line": 43,
            "end_line": 92,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExtractFacePlane",
            "parameters": 1,
            "complexity": 4,
            "length": 20,
            "doc_present": true,
            "start_line": 97,
            "end_line": 116,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FitPlaneToFace",
            "parameters": 1,
            "complexity": 8,
            "length": 41,
            "doc_present": true,
            "start_line": 121,
            "end_line": 161,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MergeCoplanarFaces",
            "parameters": 2,
            "complexity": 7,
            "length": 35,
            "doc_present": true,
            "start_line": 166,
            "end_line": 200,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryMergeFacesOnPlane",
            "parameters": 2,
            "complexity": 6,
            "length": 37,
            "doc_present": true,
            "start_line": 205,
            "end_line": 241,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ProjectFaceTo2D",
            "parameters": 2,
            "complexity": 9,
            "length": 46,
            "doc_present": true,
            "start_line": 246,
            "end_line": 291,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Union2DPolygons",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 293,
            "end_line": 296,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreCoplanar",
            "parameters": 3,
            "complexity": 2,
            "length": 13,
            "doc_present": false,
            "start_line": 298,
            "end_line": 310,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PlaneComparer",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 316,
            "end_line": 319,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Equals",
            "parameters": 2,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 321,
            "end_line": 324,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetHashCode",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 326,
            "end_line": 329,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DetectCoplanarContacts",
            "parameters": 5,
            "complexity": 16,
            "length": 120,
            "doc_present": true,
            "start_line": 348,
            "end_line": 467,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MakeContact",
            "parameters": 2,
            "complexity": 3,
            "length": 23,
            "doc_present": true,
            "start_line": 472,
            "end_line": 494,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact",
          "AssemblyChain.Core.Domain.Entities"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Geometry",
        "loc": 235,
        "sloc": 209,
        "doc_lines": 47,
        "classes": [
          "MeshGeometry"
        ],
        "methods": [
          {
            "name": "CalculateFaceCenter",
            "parameters": 2,
            "complexity": 3,
            "length": 19,
            "doc_present": true,
            "start_line": 22,
            "end_line": 40,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateFaceArea",
            "parameters": 2,
            "complexity": 3,
            "length": 28,
            "doc_present": true,
            "start_line": 48,
            "end_line": 75,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateTriangleArea",
            "parameters": 3,
            "complexity": 1,
            "length": 7,
            "doc_present": true,
            "start_line": 80,
            "end_line": 86,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFaceNormal",
            "parameters": 2,
            "complexity": 3,
            "length": 11,
            "doc_present": true,
            "start_line": 94,
            "end_line": 104,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateMinDistance",
            "parameters": 3,
            "complexity": 6,
            "length": 41,
            "doc_present": true,
            "start_line": 113,
            "end_line": 153,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ApproximateArea",
            "parameters": 1,
            "complexity": 3,
            "length": 14,
            "doc_present": true,
            "start_line": 160,
            "end_line": 173,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeGeometryArea",
            "parameters": 1,
            "complexity": 5,
            "length": 27,
            "doc_present": true,
            "start_line": 180,
            "end_line": 206,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 189,
            "end_line": 194,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 195,
            "end_line": 199,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "InferContactPlane",
            "parameters": 1,
            "complexity": 3,
            "length": 21,
            "doc_present": true,
            "start_line": 213,
            "end_line": 233,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Contact"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Geometry",
        "loc": 341,
        "sloc": 293,
        "doc_lines": 75,
        "classes": [
          "PlaneOperations"
        ],
        "methods": [
          {
            "name": "GroupFacesByPlanes",
            "parameters": 2,
            "complexity": 3,
            "length": 28,
            "doc_present": true,
            "start_line": 21,
            "end_line": 48,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ArePlanesCoplanar",
            "parameters": 3,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 57,
            "end_line": 65,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FitPlaneFromCurves",
            "parameters": 2,
            "complexity": 4,
            "length": 24,
            "doc_present": true,
            "start_line": 73,
            "end_line": 96,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreFacesCoplanarAndClose",
            "parameters": 3,
            "complexity": 2,
            "length": 13,
            "doc_present": true,
            "start_line": 105,
            "end_line": 117,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFacePlane",
            "parameters": 2,
            "complexity": 4,
            "length": 28,
            "doc_present": true,
            "start_line": 125,
            "end_line": 152,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeFaceIntersectionGeometry",
            "parameters": 6,
            "complexity": 7,
            "length": 55,
            "doc_present": true,
            "start_line": 164,
            "end_line": 218,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFaceVertices",
            "parameters": 2,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 223,
            "end_line": 231,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ProjectPolylineToPlane",
            "parameters": 2,
            "complexity": 2,
            "length": 12,
            "doc_present": true,
            "start_line": 239,
            "end_line": 250,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputePolygonIntersection2D",
            "parameters": 3,
            "complexity": 2,
            "length": 23,
            "doc_present": true,
            "start_line": 259,
            "end_line": 281,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ConvertPolygon2DTo3D",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 289,
            "end_line": 293,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Intersection",
        "loc": 308,
        "sloc": 268,
        "doc_lines": 33,
        "classes": [
          "BrepBrepIntersect",
          "IntersectionOptions",
          "IntersectionResult"
        ],
        "methods": [
          {
            "name": "ComputeIntersection",
            "parameters": 3,
            "complexity": 5,
            "length": 50,
            "doc_present": true,
            "start_line": 42,
            "end_line": 91,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeSurfaceIntersections",
            "parameters": 3,
            "complexity": 3,
            "length": 25,
            "doc_present": true,
            "start_line": 96,
            "end_line": 120,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MergeCoplanarIntersections",
            "parameters": 2,
            "complexity": 9,
            "length": 50,
            "doc_present": true,
            "start_line": 125,
            "end_line": 174,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanMergeCurves",
            "parameters": 3,
            "complexity": 2,
            "length": 20,
            "doc_present": true,
            "start_line": 179,
            "end_line": 198,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "MergeCurveGroup",
            "parameters": 2,
            "complexity": 2,
            "length": 13,
            "doc_present": true,
            "start_line": 203,
            "end_line": 215,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExtractPointsFromCurves",
            "parameters": 3,
            "complexity": 5,
            "length": 30,
            "doc_present": true,
            "start_line": 220,
            "end_line": 249,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SamplePointsOnCurve",
            "parameters": 2,
            "complexity": 3,
            "length": 25,
            "doc_present": true,
            "start_line": 254,
            "end_line": 278,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeMultipleIntersections",
            "parameters": 2,
            "complexity": 4,
            "length": 20,
            "doc_present": true,
            "start_line": 283,
            "end_line": 302,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Intersection",
        "loc": 366,
        "sloc": 317,
        "doc_lines": 33,
        "classes": [
          "MeshMeshIntersect",
          "IntersectionOptions",
          "IntersectionResult",
          "ContactDetectionResult"
        ],
        "methods": [
          {
            "name": "DetectContactsBasedOnIntersection",
            "parameters": 5,
            "complexity": 5,
            "length": 58,
            "doc_present": true,
            "start_line": 60,
            "end_line": 117,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeIntersection",
            "parameters": 3,
            "complexity": 9,
            "length": 81,
            "doc_present": true,
            "start_line": 122,
            "end_line": 202,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ExtractPointsFromIntersections",
            "parameters": 2,
            "complexity": 6,
            "length": 43,
            "doc_present": true,
            "start_line": 207,
            "end_line": 249,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeMultipleIntersections",
            "parameters": 2,
            "complexity": 4,
            "length": 20,
            "doc_present": true,
            "start_line": 254,
            "end_line": 273,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BoundingBoxCheck",
            "parameters": 3,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 278,
            "end_line": 286,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ApproximateIntersection",
            "parameters": 4,
            "complexity": 5,
            "length": 50,
            "doc_present": true,
            "start_line": 291,
            "end_line": 340,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SamplePointsInBoundingBox",
            "parameters": 2,
            "complexity": 2,
            "length": 16,
            "doc_present": true,
            "start_line": 345,
            "end_line": 360,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry",
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Math/Clustering.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 317,
        "sloc": 291,
        "doc_lines": 3,
        "classes": [
          "Clustering",
          "KMeansOptions",
          "KMeansResult"
        ],
        "methods": [
          {
            "name": "KMeans",
            "parameters": 3,
            "complexity": 8,
            "length": 52,
            "doc_present": false,
            "start_line": 31,
            "end_line": 82,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "InitializeKMeansPlusPlus",
            "parameters": 3,
            "complexity": 6,
            "length": 32,
            "doc_present": false,
            "start_line": 84,
            "end_line": 115,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "InitializeRandom",
            "parameters": 3,
            "complexity": 2,
            "length": 12,
            "doc_present": false,
            "start_line": 117,
            "end_line": 128,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindNearestCentroid",
            "parameters": 2,
            "complexity": 3,
            "length": 15,
            "doc_present": false,
            "start_line": 130,
            "end_line": 144,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateCentroids",
            "parameters": 3,
            "complexity": 4,
            "length": 25,
            "doc_present": false,
            "start_line": 146,
            "end_line": 170,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateInertia",
            "parameters": 3,
            "complexity": 2,
            "length": 11,
            "doc_present": false,
            "start_line": 172,
            "end_line": 182,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "HierarchicalClustering",
            "parameters": 2,
            "complexity": 7,
            "length": 28,
            "doc_present": false,
            "start_line": 184,
            "end_line": 211,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ClusterDistance",
            "parameters": 2,
            "complexity": 4,
            "length": 13,
            "doc_present": false,
            "start_line": 213,
            "end_line": 225,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DBSCAN",
            "parameters": 3,
            "complexity": 11,
            "length": 43,
            "doc_present": false,
            "start_line": 227,
            "end_line": 269,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindNeighbors",
            "parameters": 3,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 271,
            "end_line": 280,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SilhouetteScore",
            "parameters": 3,
            "complexity": 5,
            "length": 20,
            "doc_present": false,
            "start_line": 282,
            "end_line": 301,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AverageDistanceToCluster",
            "parameters": 4,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 303,
            "end_line": 312,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Math/ConvexCone.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 194,
        "sloc": 170,
        "doc_lines": 9,
        "classes": [
          "ConvexCone",
          "Halfspace",
          "Cone"
        ],
        "methods": [
          {
            "name": "Halfspace",
            "parameters": 2,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 21,
            "end_line": 26,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Halfspace",
            "parameters": 2,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 28,
            "end_line": 33,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SignedDistance",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 35,
            "end_line": 38,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Contains",
            "parameters": 2,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 40,
            "end_line": 43,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddHalfspace",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 53,
            "end_line": 53,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AddHalfspace",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 54,
            "end_line": 54,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Contains",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 55,
            "end_line": 55,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsEmpty",
            "parameters": 0,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 56,
            "end_line": 56,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetExtremeRays",
            "parameters": 0,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 57,
            "end_line": 57,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateHalfspaceFromContact",
            "parameters": 3,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 60,
            "end_line": 63,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateConeFromContacts",
            "parameters": 1,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 65,
            "end_line": 74,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IntersectCones",
            "parameters": 2,
            "complexity": 3,
            "length": 7,
            "doc_present": false,
            "start_line": 76,
            "end_line": 82,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeExtremeRays",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 84,
            "end_line": 87,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 89,
            "end_line": 92,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 94,
            "end_line": 97,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeDualCone",
            "parameters": 1,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 99,
            "end_line": 108,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsPointed",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 110,
            "end_line": 114,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetDimension",
            "parameters": 1,
            "complexity": 4,
            "length": 8,
            "doc_present": false,
            "start_line": 116,
            "end_line": 123,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreCoplanar",
            "parameters": 1,
            "complexity": 4,
            "length": 13,
            "doc_present": false,
            "start_line": 125,
            "end_line": 137,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateMotionRays",
            "parameters": 3,
            "complexity": 4,
            "length": 22,
            "doc_present": false,
            "start_line": 139,
            "end_line": 160,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Slerp",
            "parameters": 3,
            "complexity": 2,
            "length": 11,
            "doc_present": false,
            "start_line": 162,
            "end_line": 172,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateUniformRays",
            "parameters": 1,
            "complexity": 3,
            "length": 16,
            "doc_present": false,
            "start_line": 174,
            "end_line": 189,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Math/LinearAlgebra.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 173,
        "sloc": 158,
        "doc_lines": 37,
        "classes": [
          "LinearAlgebra"
        ],
        "methods": [
          {
            "name": "GramSchmidtOrthogonalize",
            "parameters": 1,
            "complexity": 5,
            "length": 23,
            "doc_present": true,
            "start_line": 16,
            "end_line": 38,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ProjectOnto",
            "parameters": 2,
            "complexity": 2,
            "length": 7,
            "doc_present": true,
            "start_line": 43,
            "end_line": 49,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "OrthogonalComplement",
            "parameters": 1,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 54,
            "end_line": 62,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AngleBetween",
            "parameters": 2,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 67,
            "end_line": 75,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AreLinearlyDependent",
            "parameters": 3,
            "complexity": 2,
            "length": 6,
            "doc_present": true,
            "start_line": 80,
            "end_line": 85,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Determinant",
            "parameters": 3,
            "complexity": 1,
            "length": 6,
            "doc_present": true,
            "start_line": 90,
            "end_line": 95,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveLinearSystem",
            "parameters": 4,
            "complexity": 2,
            "length": 9,
            "doc_present": true,
            "start_line": 100,
            "end_line": 108,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Rank",
            "parameters": 2,
            "complexity": 2,
            "length": 6,
            "doc_present": true,
            "start_line": 113,
            "end_line": 118,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "NullSpace",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 123,
            "end_line": 127,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "NullSpace",
            "parameters": 2,
            "complexity": 3,
            "length": 12,
            "doc_present": true,
            "start_line": 132,
            "end_line": 143,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/MeshPreprocessor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 353,
        "sloc": 312,
        "doc_lines": 19,
        "classes": [
          "MeshPreprocessor",
          "PreprocessingOptions",
          "PreprocessingResult"
        ],
        "methods": [
          {
            "name": "CreateBalanced",
            "parameters": 0,
            "complexity": 1,
            "length": 11,
            "doc_present": false,
            "start_line": 33,
            "end_line": 43,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateFast",
            "parameters": 0,
            "complexity": 1,
            "length": 11,
            "doc_present": false,
            "start_line": 45,
            "end_line": 55,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PreprocessMesh",
            "parameters": 2,
            "complexity": 16,
            "length": 117,
            "doc_present": true,
            "start_line": 82,
            "end_line": 198,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreatePreprocessedMesh",
            "parameters": 2,
            "complexity": 8,
            "length": 53,
            "doc_present": true,
            "start_line": 203,
            "end_line": 255,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 216,
            "end_line": 219,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 220,
            "end_line": 223,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 224,
            "end_line": 227,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 228,
            "end_line": 231,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateMeshFromBrep",
            "parameters": 2,
            "complexity": 4,
            "length": 25,
            "doc_present": false,
            "start_line": 259,
            "end_line": 283,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateMeshFromSurface",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 285,
            "end_line": 289,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateMeshFromExtrusion",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 291,
            "end_line": 295,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateMeshFromSubD",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 297,
            "end_line": 301,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateReport",
            "parameters": 1,
            "complexity": 8,
            "length": 44,
            "doc_present": true,
            "start_line": 308,
            "end_line": 351,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 211,
        "sloc": 185,
        "doc_lines": 41,
        "classes": [
          "MeshSpatialIndex"
        ],
        "methods": [
          {
            "name": "MeshSpatialIndex",
            "parameters": 2,
            "complexity": 1,
            "length": 11,
            "doc_present": true,
            "start_line": 24,
            "end_line": 34,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "BuildIndex",
            "parameters": 0,
            "complexity": 3,
            "length": 14,
            "doc_present": true,
            "start_line": 39,
            "end_line": 52,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetNearbyFaces",
            "parameters": 2,
            "complexity": 4,
            "length": 16,
            "doc_present": true,
            "start_line": 60,
            "end_line": 75,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFacesInRegion",
            "parameters": 1,
            "complexity": 7,
            "length": 36,
            "doc_present": true,
            "start_line": 82,
            "end_line": 117,
            "max_nesting": 7,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "complexity": 1,
            "length": 11,
            "doc_present": true,
            "start_line": 122,
            "end_line": 132,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetCellKey",
            "parameters": 1,
            "complexity": 1,
            "length": 9,
            "doc_present": true,
            "start_line": 137,
            "end_line": 145,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetXFromKey",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": true,
            "start_line": 150,
            "end_line": 150,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetYFromKey",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": true,
            "start_line": 151,
            "end_line": 151,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetZFromKey",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 152,
            "end_line": 152,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetCellKeyFromXYZ",
            "parameters": 3,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 157,
            "end_line": 160,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetNearbyCells",
            "parameters": 2,
            "complexity": 4,
            "length": 22,
            "doc_present": true,
            "start_line": 165,
            "end_line": 186,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateFaceCenter",
            "parameters": 2,
            "complexity": 3,
            "length": 19,
            "doc_present": true,
            "start_line": 191,
            "end_line": 209,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 223,
        "sloc": 194,
        "doc_lines": 28,
        "classes": [
          "MeshToBrep",
          "ConversionOptions",
          "ConversionResult"
        ],
        "methods": [
          {
            "name": "ConvertToBrep",
            "parameters": 2,
            "complexity": 5,
            "length": 48,
            "doc_present": true,
            "start_line": 41,
            "end_line": 88,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryRhinoConversion",
            "parameters": 2,
            "complexity": 2,
            "length": 12,
            "doc_present": true,
            "start_line": 94,
            "end_line": 105,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PatchBasedReconstruction",
            "parameters": 2,
            "complexity": 2,
            "length": 14,
            "doc_present": true,
            "start_line": 110,
            "end_line": 123,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeMeshArea",
            "parameters": 1,
            "complexity": 3,
            "length": 39,
            "doc_present": true,
            "start_line": 128,
            "end_line": 166,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeBrepArea",
            "parameters": 1,
            "complexity": 4,
            "length": 15,
            "doc_present": true,
            "start_line": 171,
            "end_line": 185,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateConversion",
            "parameters": 4,
            "complexity": 4,
            "length": 28,
            "doc_present": true,
            "start_line": 190,
            "end_line": 217,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 495,
        "sloc": 436,
        "doc_lines": 23,
        "classes": [
          "MeshOptimizer",
          "OptimizationOptions",
          "OptimizationResult",
          "Point3dComparer"
        ],
        "methods": [
          {
            "name": "OptimizeMesh",
            "parameters": 2,
            "complexity": 7,
            "length": 54,
            "doc_present": true,
            "start_line": 47,
            "end_line": 100,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WeldDuplicateVertices",
            "parameters": 3,
            "complexity": 3,
            "length": 19,
            "doc_present": false,
            "start_line": 102,
            "end_line": 120,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReduceVertices",
            "parameters": 3,
            "complexity": 10,
            "length": 76,
            "doc_present": false,
            "start_line": 122,
            "end_line": 197,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UnifyMeshNormals",
            "parameters": 2,
            "complexity": 2,
            "length": 12,
            "doc_present": false,
            "start_line": 199,
            "end_line": 210,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SmoothMesh",
            "parameters": 3,
            "complexity": 7,
            "length": 48,
            "doc_present": false,
            "start_line": 212,
            "end_line": 259,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemoveRedundantVertices",
            "parameters": 2,
            "complexity": 4,
            "length": 33,
            "doc_present": true,
            "start_line": 264,
            "end_line": 296,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SimplifyMesh",
            "parameters": 2,
            "complexity": 7,
            "length": 49,
            "doc_present": true,
            "start_line": 301,
            "end_line": 349,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ImproveMeshQuality",
            "parameters": 2,
            "complexity": 7,
            "length": 39,
            "doc_present": true,
            "start_line": 354,
            "end_line": 392,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateFacesReferencingVertex",
            "parameters": 3,
            "complexity": 6,
            "length": 13,
            "doc_present": false,
            "start_line": 394,
            "end_line": 406,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetVertexNeighbors",
            "parameters": 2,
            "complexity": 10,
            "length": 23,
            "doc_present": false,
            "start_line": 408,
            "end_line": 430,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 2,
            "length": 1,
            "doc_present": false,
            "start_line": 419,
            "end_line": 419,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 2,
            "length": 1,
            "doc_present": false,
            "start_line": 420,
            "end_line": 420,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 421,
            "end_line": 421,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateFaceArea",
            "parameters": 2,
            "complexity": 3,
            "length": 37,
            "doc_present": false,
            "start_line": 432,
            "end_line": 468,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Point3dComparer",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 474,
            "end_line": 477,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Equals",
            "parameters": 2,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 479,
            "end_line": 482,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetHashCode",
            "parameters": 1,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 484,
            "end_line": 492,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 369,
        "sloc": 329,
        "doc_lines": 12,
        "classes": [
          "MeshRepair",
          "RepairOptions",
          "RepairResult"
        ],
        "methods": [
          {
            "name": "RepairMesh",
            "parameters": 2,
            "complexity": 6,
            "length": 41,
            "doc_present": true,
            "start_line": 43,
            "end_line": 83,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FillMeshHoles",
            "parameters": 3,
            "complexity": 8,
            "length": 55,
            "doc_present": false,
            "start_line": 85,
            "end_line": 139,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FixNonManifoldEdges",
            "parameters": 3,
            "complexity": 3,
            "length": 22,
            "doc_present": false,
            "start_line": 141,
            "end_line": 162,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemoveDuplicateFaces",
            "parameters": 3,
            "complexity": 6,
            "length": 40,
            "doc_present": false,
            "start_line": 164,
            "end_line": 203,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "HealNakedEdges",
            "parameters": 3,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 205,
            "end_line": 210,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GroupNakedEdgesIntoLoops",
            "parameters": 2,
            "complexity": 11,
            "length": 79,
            "doc_present": false,
            "start_line": 212,
            "end_line": 290,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 10,
            "doc_present": false,
            "start_line": 250,
            "end_line": 259,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 10,
            "doc_present": false,
            "start_line": 260,
            "end_line": 269,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 10,
            "doc_present": false,
            "start_line": 270,
            "end_line": 279,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateLoopArea",
            "parameters": 2,
            "complexity": 5,
            "length": 29,
            "doc_present": false,
            "start_line": 292,
            "end_line": 320,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryFillHole",
            "parameters": 2,
            "complexity": 5,
            "length": 30,
            "doc_present": false,
            "start_line": 322,
            "end_line": 351,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetFaceSignature",
            "parameters": 1,
            "complexity": 2,
            "length": 15,
            "doc_present": false,
            "start_line": 353,
            "end_line": 367,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 341,
        "sloc": 304,
        "doc_lines": 18,
        "classes": [
          "MeshValidator",
          "ValidationOptions",
          "ValidationResult"
        ],
        "methods": [
          {
            "name": "ValidateMesh",
            "parameters": 2,
            "complexity": 9,
            "length": 63,
            "doc_present": true,
            "start_line": 42,
            "end_line": 104,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FinalValidation",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 109,
            "end_line": 113,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateMeshForContactDetection",
            "parameters": 3,
            "complexity": 1,
            "length": 6,
            "doc_present": true,
            "start_line": 118,
            "end_line": 123,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CheckTopology",
            "parameters": 3,
            "complexity": 4,
            "length": 28,
            "doc_present": false,
            "start_line": 125,
            "end_line": 152,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CheckDegenerateFaces",
            "parameters": 3,
            "complexity": 6,
            "length": 36,
            "doc_present": false,
            "start_line": 154,
            "end_line": 189,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 180,
            "end_line": 183,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CheckNormals",
            "parameters": 2,
            "complexity": 7,
            "length": 46,
            "doc_present": false,
            "start_line": 191,
            "end_line": 236,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CheckBoundingBox",
            "parameters": 3,
            "complexity": 4,
            "length": 31,
            "doc_present": false,
            "start_line": 238,
            "end_line": 268,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsDegenerateFace",
            "parameters": 2,
            "complexity": 7,
            "length": 47,
            "doc_present": false,
            "start_line": 270,
            "end_line": 316,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindDuplicateFaces",
            "parameters": 1,
            "complexity": 3,
            "length": 22,
            "doc_present": false,
            "start_line": 318,
            "end_line": 339,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/CacheManager.cs",
        "namespace": "AssemblyChain.Core.Utils",
        "loc": 230,
        "sloc": 209,
        "doc_lines": 46,
        "classes": [
          "CacheManager",
          "CacheItem",
          "CacheStatistics",
          "GlobalCache"
        ],
        "methods": [
          {
            "name": "CacheManager",
            "parameters": 2,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 21,
            "end_line": 27,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Get",
            "parameters": 1,
            "complexity": 4,
            "length": 14,
            "doc_present": true,
            "start_line": 32,
            "end_line": 45,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Set",
            "parameters": 3,
            "complexity": 3,
            "length": 14,
            "doc_present": true,
            "start_line": 50,
            "end_line": 63,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetOrCreate",
            "parameters": 3,
            "complexity": 2,
            "length": 8,
            "doc_present": true,
            "start_line": 68,
            "end_line": 75,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetOrCreateAsync",
            "parameters": 3,
            "complexity": 2,
            "length": 8,
            "doc_present": true,
            "start_line": 80,
            "end_line": 87,
            "max_nesting": 1,
            "is_async": true,
            "await_count": 1
          },
          {
            "name": "Remove",
            "parameters": 1,
            "complexity": 2,
            "length": 5,
            "doc_present": true,
            "start_line": 92,
            "end_line": 96,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Clear",
            "parameters": 0,
            "complexity": 2,
            "length": 5,
            "doc_present": true,
            "start_line": 101,
            "end_line": 105,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "complexity": 2,
            "length": 15,
            "doc_present": true,
            "start_line": 110,
            "end_line": 124,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CleanupExpiredItems",
            "parameters": 1,
            "complexity": 3,
            "length": 12,
            "doc_present": true,
            "start_line": 129,
            "end_line": 140,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CleanupOldItems",
            "parameters": 0,
            "complexity": 4,
            "length": 15,
            "doc_present": true,
            "start_line": 145,
            "end_line": 159,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "EstimateMemoryUsage",
            "parameters": 0,
            "complexity": 1,
            "length": 6,
            "doc_present": true,
            "start_line": 164,
            "end_line": 169,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Dispose",
            "parameters": 0,
            "complexity": 2,
            "length": 7,
            "doc_present": false,
            "start_line": 171,
            "end_line": 177,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 1,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/ContactDetectionHelpers.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 26,
        "sloc": 25,
        "doc_lines": 6,
        "classes": [
          "ContactDetectionHelpers"
        ],
        "methods": [
          {
            "name": "IsContactBlocking",
            "parameters": 2,
            "complexity": 2,
            "length": 10,
            "doc_present": true,
            "start_line": 15,
            "end_line": 24,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model",
          "AssemblyChain.Core.Contact"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 81,
        "sloc": 72,
        "doc_lines": 6,
        "classes": [
          "ExtremeRayExtractor"
        ],
        "methods": [
          {
            "name": "Extract",
            "parameters": 2,
            "complexity": 8,
            "length": 28,
            "doc_present": true,
            "start_line": 16,
            "end_line": 43,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SampleRaysEvenly",
            "parameters": 2,
            "complexity": 7,
            "length": 32,
            "doc_present": false,
            "start_line": 45,
            "end_line": 76,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 118,
        "sloc": 103,
        "doc_lines": 18,
        "classes": [
          "GroupCandidates"
        ],
        "methods": [
          {
            "name": "GenerateCandidates",
            "parameters": 2,
            "complexity": 5,
            "length": 29,
            "doc_present": true,
            "start_line": 16,
            "end_line": 44,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateSubgroups",
            "parameters": 2,
            "complexity": 3,
            "length": 10,
            "doc_present": true,
            "start_line": 49,
            "end_line": 58,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateCombinations",
            "parameters": 2,
            "complexity": 7,
            "length": 17,
            "doc_present": true,
            "start_line": 63,
            "end_line": 79,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "EvaluateCandidate",
            "parameters": 2,
            "complexity": 5,
            "length": 17,
            "doc_present": true,
            "start_line": 84,
            "end_line": 100,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Model"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 47,
        "sloc": 41,
        "doc_lines": 12,
        "classes": [
          "HalfspaceCone"
        ],
        "methods": [
          {
            "name": "IsPointInHalfspace",
            "parameters": 3,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 16,
            "end_line": 20,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "complexity": 4,
            "length": 10,
            "doc_present": true,
            "start_line": 25,
            "end_line": 34,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 39,
            "end_line": 42,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/Hashing.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 103,
        "sloc": 92,
        "doc_lines": 12,
        "classes": [
          "Hashing"
        ],
        "methods": [
          {
            "name": "ForAssembly",
            "parameters": 1,
            "complexity": 2,
            "length": 10,
            "doc_present": false,
            "start_line": 16,
            "end_line": 25,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForContacts",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 27,
            "end_line": 31,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForGraphs",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 33,
            "end_line": 37,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForMotion",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 39,
            "end_line": 43,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForConstraints",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 45,
            "end_line": 49,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForSolver",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 51,
            "end_line": 55,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForCentroid",
            "parameters": 2,
            "complexity": 1,
            "length": 8,
            "doc_present": true,
            "start_line": 60,
            "end_line": 67,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForArea",
            "parameters": 2,
            "complexity": 1,
            "length": 6,
            "doc_present": true,
            "start_line": 72,
            "end_line": 77,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ForPlane",
            "parameters": 2,
            "complexity": 1,
            "length": 11,
            "doc_present": true,
            "start_line": 82,
            "end_line": 92,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ComputeHash",
            "parameters": 1,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 94,
            "end_line": 100,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/JsonSerializer.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 278,
        "sloc": 248,
        "doc_lines": 3,
        "classes": [
          "JsonSerializer",
          "SerializationOptions",
          "SerializationException",
          "Point3dConverter",
          "Vector3dConverter",
          "PlaneConverter",
          "BoundingBoxConverter",
          "GuidConverter"
        ],
        "methods": [
          {
            "name": "JsonSerializer",
            "parameters": 0,
            "complexity": 1,
            "length": 18,
            "doc_present": false,
            "start_line": 17,
            "end_line": 34,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Serialize",
            "parameters": 2,
            "complexity": 3,
            "length": 38,
            "doc_present": false,
            "start_line": 44,
            "end_line": 81,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SaveToFile",
            "parameters": 3,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 95,
            "end_line": 99,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 119,
            "end_line": 127,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "complexity": 8,
            "length": 20,
            "doc_present": false,
            "start_line": 129,
            "end_line": 148,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 150,
            "end_line": 150,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 155,
            "end_line": 163,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "complexity": 8,
            "length": 20,
            "doc_present": false,
            "start_line": 165,
            "end_line": 184,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 186,
            "end_line": 186,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 191,
            "end_line": 198,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "complexity": 7,
            "length": 19,
            "doc_present": false,
            "start_line": 200,
            "end_line": 218,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 220,
            "end_line": 220,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 225,
            "end_line": 232,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "complexity": 7,
            "length": 19,
            "doc_present": false,
            "start_line": 234,
            "end_line": 252,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 254,
            "end_line": 254,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 259,
            "end_line": 262,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 264,
            "end_line": 267,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 269,
            "end_line": 269,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Newtonsoft.Json",
          "Newtonsoft.Json.Converters",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/ParallelProcessor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 196,
        "sloc": 176,
        "doc_lines": 24,
        "classes": [
          "ParallelProcessor",
          "ParallelProcessingConfig"
        ],
        "methods": [
          {
            "name": "IsParallelProcessingSupported",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 163,
            "end_line": 166,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetRecommendedParallelism",
            "parameters": 1,
            "complexity": 5,
            "length": 8,
            "doc_present": true,
            "start_line": 171,
            "end_line": 178,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 3,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/PerformanceMonitor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 224,
        "sloc": 199,
        "doc_lines": 66,
        "classes": [
          "PerformanceMonitor",
          "PerformanceMonitorHelper"
        ],
        "methods": [
          {
            "name": "PerformanceMonitor",
            "parameters": 0,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 21,
            "end_line": 25,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "StartTimer",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 31,
            "end_line": 35,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "StopTimer",
            "parameters": 1,
            "complexity": 2,
            "length": 10,
            "doc_present": true,
            "start_line": 41,
            "end_line": 50,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetDuration",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 57,
            "end_line": 60,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "LogDebug",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": true,
            "start_line": 66,
            "end_line": 71,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateReport",
            "parameters": 0,
            "complexity": 5,
            "length": 30,
            "doc_present": true,
            "start_line": 77,
            "end_line": 106,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "complexity": 1,
            "length": 16,
            "doc_present": true,
            "start_line": 112,
            "end_line": 127,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Reset",
            "parameters": 0,
            "complexity": 1,
            "length": 5,
            "doc_present": true,
            "start_line": 132,
            "end_line": 136,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetOperationNames",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 141,
            "end_line": 144,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsRunning",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 151,
            "end_line": 154,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetRunningOperations",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 160,
            "end_line": 163,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetMonitor",
            "parameters": 1,
            "complexity": 2,
            "length": 8,
            "doc_present": true,
            "start_line": 178,
            "end_line": 185,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RemoveMonitor",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 191,
            "end_line": 194,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ClearAll",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": true,
            "start_line": 199,
            "end_line": 202,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GenerateGlobalReport",
            "parameters": 0,
            "complexity": 2,
            "length": 15,
            "doc_present": true,
            "start_line": 208,
            "end_line": 222,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Core/Toolkit/Utils/Tolerance.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 171,
        "sloc": 150,
        "doc_lines": 6,
        "classes": [
          "Tolerance",
          "ToleranceSettings",
          "ToleranceContext"
        ],
        "methods": [
          {
            "name": "GetAdaptiveTolerance",
            "parameters": 1,
            "complexity": 2,
            "length": 5,
            "doc_present": false,
            "start_line": 37,
            "end_line": 41,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetAdaptiveTolerance",
            "parameters": 1,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 43,
            "end_line": 48,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Equal",
            "parameters": 3,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 50,
            "end_line": 54,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsZero",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 56,
            "end_line": 60,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PointsEqual",
            "parameters": 3,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 62,
            "end_line": 66,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "VectorsParallel",
            "parameters": 3,
            "complexity": 2,
            "length": 7,
            "doc_present": false,
            "start_line": 68,
            "end_line": 74,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "PlanesCoplanar",
            "parameters": 3,
            "complexity": 2,
            "length": 8,
            "doc_present": false,
            "start_line": 76,
            "end_line": 83,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsSignificantArea",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 85,
            "end_line": 88,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsSignificantVolume",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 90,
            "end_line": 93,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RoundToTolerance",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 95,
            "end_line": 99,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToleranceContext",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 104,
            "end_line": 108,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Dispose",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 109,
            "end_line": 112,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateContext",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 115,
            "end_line": 118,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateRobustContext",
            "parameters": 1,
            "complexity": 1,
            "length": 18,
            "doc_present": false,
            "start_line": 120,
            "end_line": 137,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateSettings",
            "parameters": 2,
            "complexity": 12,
            "length": 20,
            "doc_present": false,
            "start_line": 139,
            "end_line": 158,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetDescription",
            "parameters": 0,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 160,
            "end_line": 166,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": []
      },
      {
        "path": "AssemblyChain.Grasshopper/Components/1_Property/AcGhDefinePhysicalProperty.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 88,
        "sloc": 76,
        "doc_lines": 3,
        "classes": [
          "AcGhDefinePhysicalProperty"
        ],
        "methods": [
          {
            "name": "RegisterInputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 8,
            "doc_present": false,
            "start_line": 18,
            "end_line": 25,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RegisterOutputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 27,
            "end_line": 30,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveInstance",
            "parameters": 1,
            "complexity": 7,
            "length": 53,
            "doc_present": false,
            "start_line": 32,
            "end_line": 84,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.ValueObjects",
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreateAssembly.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 126,
        "sloc": 112,
        "doc_lines": 0,
        "classes": [
          "AcGhCreateAssembly"
        ],
        "methods": [
          {
            "name": "RegisterInputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 19,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RegisterOutputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 25,
            "end_line": 28,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveInstance",
            "parameters": 1,
            "complexity": 12,
            "length": 92,
            "doc_present": false,
            "start_line": 30,
            "end_line": 121,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 73,
            "end_line": 77,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core",
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Domain.ValueObjects",
          "Grasshopper.Kernel",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Components/2_Part/AcGhCreatePart.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 458,
        "sloc": 404,
        "doc_lines": 9,
        "classes": [
          "AcGhCreatePart"
        ],
        "methods": [
          {
            "name": "RegisterInputParams",
            "parameters": 1,
            "complexity": 2,
            "length": 12,
            "doc_present": false,
            "start_line": 27,
            "end_line": 38,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RegisterOutputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 40,
            "end_line": 43,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveInstance",
            "parameters": 1,
            "complexity": 22,
            "length": 163,
            "doc_present": false,
            "start_line": 45,
            "end_line": 207,
            "max_nesting": 6,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanInsertParameter",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 212,
            "end_line": 212,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CanRemoveParameter",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 213,
            "end_line": 213,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CreateParameter",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 214,
            "end_line": 214,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DestroyParameter",
            "parameters": 2,
            "complexity": 1,
            "length": 1,
            "doc_present": false,
            "start_line": 215,
            "end_line": 215,
            "max_nesting": 0,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "VariableParameterMaintenance",
            "parameters": 0,
            "complexity": 5,
            "length": 37,
            "doc_present": false,
            "start_line": 217,
            "end_line": 253,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateInputParameters",
            "parameters": 0,
            "complexity": 9,
            "length": 73,
            "doc_present": false,
            "start_line": 255,
            "end_line": 327,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdatePhysicsMode",
            "parameters": 1,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 329,
            "end_line": 335,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "UpdateOutputParameters",
            "parameters": 0,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 337,
            "end_line": 342,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ValidateInputConnections",
            "parameters": 0,
            "complexity": 4,
            "length": 26,
            "doc_present": true,
            "start_line": 347,
            "end_line": 372,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "IsCompatibleSource",
            "parameters": 1,
            "complexity": 2,
            "length": 11,
            "doc_present": true,
            "start_line": 377,
            "end_line": 387,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AppendAdditionalComponentMenuItems",
            "parameters": 1,
            "complexity": 1,
            "length": 34,
            "doc_present": false,
            "start_line": 390,
            "end_line": 423,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Write",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 426,
            "end_line": 431,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Read",
            "parameters": 1,
            "complexity": 3,
            "length": 20,
            "doc_present": false,
            "start_line": 433,
            "end_line": 452,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Domain.ValueObjects",
          "Grasshopper.Kernel",
          "Grasshopper.Kernel.Types",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhBuildContactModel.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 102,
        "sloc": 85,
        "doc_lines": 0,
        "classes": [
          "AcGhBuildContactModel"
        ],
        "methods": [
          {
            "name": "RegisterInputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 19,
            "end_line": 25,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RegisterOutputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 27,
            "end_line": 30,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveInstance",
            "parameters": 1,
            "complexity": 4,
            "length": 67,
            "doc_present": false,
            "start_line": 32,
            "end_line": 98,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core",
          "AssemblyChain.Core.Contact",
          "AssemblyChain.Core.Model",
          "Grasshopper.Kernel",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhContactZones.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 162,
        "sloc": 139,
        "doc_lines": 0,
        "classes": [
          "AcGhContactZones"
        ],
        "methods": [
          {
            "name": "RegisterInputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 20,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RegisterOutputParams",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 25,
            "end_line": 29,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SolveInstance",
            "parameters": 1,
            "complexity": 11,
            "length": 91,
            "doc_present": false,
            "start_line": 31,
            "end_line": 121,
            "max_nesting": 4,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AppendFaceContactToPath",
            "parameters": 4,
            "complexity": 4,
            "length": 28,
            "doc_present": false,
            "start_line": 123,
            "end_line": 150,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "if",
            "parameters": 1,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 139,
            "end_line": 145,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "TryParsePartIndex",
            "parameters": 2,
            "complexity": 2,
            "length": 7,
            "doc_present": false,
            "start_line": 152,
            "end_line": 158,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel",
          "Grasshopper.Kernel.Data",
          "Grasshopper.Kernel.Types",
          "Rhino.Geometry",
          "AssemblyChain.Core.Contact"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhAssemblyWrapGoo.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 98,
        "sloc": 82,
        "doc_lines": 3,
        "classes": [
          "AcGhAssemblyWrapGoo"
        ],
        "methods": [
          {
            "name": "AcGhAssemblyWrapGoo",
            "parameters": 0,
            "complexity": 1,
            "length": 3,
            "doc_present": false,
            "start_line": 16,
            "end_line": 18,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AcGhAssemblyWrapGoo",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 20,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Duplicate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 25,
            "end_line": 28,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 36,
            "end_line": 39,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CastFrom",
            "parameters": 1,
            "complexity": 4,
            "length": 14,
            "doc_present": false,
            "start_line": 41,
            "end_line": 54,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "EnsureAssemblyModel",
            "parameters": 0,
            "complexity": 3,
            "length": 16,
            "doc_present": false,
            "start_line": 80,
            "end_line": 95,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Model",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhContactModelGoo.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 66,
        "sloc": 55,
        "doc_lines": 3,
        "classes": [
          "AcGhContactModelGoo"
        ],
        "methods": [
          {
            "name": "AcGhContactModelGoo",
            "parameters": 0,
            "complexity": 1,
            "length": 3,
            "doc_present": false,
            "start_line": 12,
            "end_line": 14,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AcGhContactModelGoo",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 16,
            "end_line": 19,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Duplicate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 21,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 2,
            "length": 7,
            "doc_present": false,
            "start_line": 32,
            "end_line": 38,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CastFrom",
            "parameters": 1,
            "complexity": 4,
            "length": 14,
            "doc_present": false,
            "start_line": 40,
            "end_line": 53,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Contact",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPartWrapGoo.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 137,
        "sloc": 121,
        "doc_lines": 15,
        "classes": [
          "AcGhPartWrapGoo"
        ],
        "methods": [
          {
            "name": "AcGhPartWrapGoo",
            "parameters": 0,
            "complexity": 1,
            "length": 3,
            "doc_present": false,
            "start_line": 13,
            "end_line": 15,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AcGhPartWrapGoo",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 17,
            "end_line": 20,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Duplicate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 70,
            "end_line": 73,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 83,
            "end_line": 88,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CastFrom",
            "parameters": 1,
            "complexity": 5,
            "length": 17,
            "doc_present": false,
            "start_line": 90,
            "end_line": 106,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.Entities",
          "AssemblyChain.Core.Domain.ValueObjects",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPhysicalPropertyGoo.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 63,
        "sloc": 53,
        "doc_lines": 3,
        "classes": [
          "AcGhPhysicalPropertyGoo"
        ],
        "methods": [
          {
            "name": "AcGhPhysicalPropertyGoo",
            "parameters": 0,
            "complexity": 1,
            "length": 3,
            "doc_present": false,
            "start_line": 11,
            "end_line": 13,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "AcGhPhysicalPropertyGoo",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 15,
            "end_line": 18,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Duplicate",
            "parameters": 0,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 20,
            "end_line": 23,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ToString",
            "parameters": 0,
            "complexity": 2,
            "length": 5,
            "doc_present": false,
            "start_line": 31,
            "end_line": 35,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CastFrom",
            "parameters": 1,
            "complexity": 4,
            "length": 14,
            "doc_present": false,
            "start_line": 37,
            "end_line": 50,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "AssemblyChain.Core.Domain.ValueObjects",
          "Grasshopper.Kernel.Types"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Params/AcGhAssemblyWrapParam.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 27,
        "sloc": 22,
        "doc_lines": 0,
        "classes": [
          "AcGhAssemblyWrapParam"
        ],
        "methods": [
          {
            "name": "Prompt_Singular",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 16,
            "end_line": 19,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Prompt_Plural",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 21,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Params/AcGhContactModelParam.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 26,
        "sloc": 22,
        "doc_lines": 0,
        "classes": [
          "AcGhContactModelParam"
        ],
        "methods": [
          {
            "name": "Prompt_Singular",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 16,
            "end_line": 19,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Prompt_Plural",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 21,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Params/AcGhPartWrapParam.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 26,
        "sloc": 22,
        "doc_lines": 0,
        "classes": [
          "AcGhPartWrapParam"
        ],
        "methods": [
          {
            "name": "Prompt_Singular",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 16,
            "end_line": 19,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Prompt_Plural",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 21,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Kernel/Params/AcGhPhysicalPropertyParam.cs",
        "namespace": "AssemblyChain.Gh.Kernel",
        "loc": 26,
        "sloc": 22,
        "doc_lines": 0,
        "classes": [
          "AcGhPhysicalPropertyParam"
        ],
        "methods": [
          {
            "name": "Prompt_Singular",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 16,
            "end_line": 19,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Prompt_Plural",
            "parameters": 1,
            "complexity": 1,
            "length": 4,
            "doc_present": false,
            "start_line": 21,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/Properties/AssemblyInfo.cs",
        "namespace": null,
        "loc": 38,
        "sloc": 33,
        "doc_lines": 0,
        "classes": [],
        "methods": [],
        "await_count": 0,
        "usings": [
          "Grasshopper.Kernel"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
        "namespace": "AssemblyChain.Gh.Visualization",
        "loc": 361,
        "sloc": 325,
        "doc_lines": 0,
        "classes": [
          "ACDBGConduit",
          "DBGNodeVis",
          "DBGEdgeVis",
          "DBGSCCVis",
          "DBGKeyPieceVis",
          "DBGPartVis",
          "DBGContactVis",
          "GraphSnapshot",
          "GraphNode",
          "GraphEdge"
        ],
        "methods": [
          {
            "name": "ACDBGConduit",
            "parameters": 0,
            "complexity": 1,
            "length": 14,
            "doc_present": false,
            "start_line": 11,
            "end_line": 24,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "ApplySnapshot",
            "parameters": 5,
            "complexity": 8,
            "length": 80,
            "doc_present": false,
            "start_line": 104,
            "end_line": 183,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Clear",
            "parameters": 0,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 185,
            "end_line": 193,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DrawForeground",
            "parameters": 1,
            "complexity": 17,
            "length": 75,
            "doc_present": false,
            "start_line": 195,
            "end_line": 269,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DrawArrow",
            "parameters": 5,
            "complexity": 2,
            "length": 12,
            "doc_present": false,
            "start_line": 271,
            "end_line": 282,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetNodeColor",
            "parameters": 3,
            "complexity": 3,
            "length": 7,
            "doc_present": false,
            "start_line": 284,
            "end_line": 290,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetEdgeColor",
            "parameters": 2,
            "complexity": 2,
            "length": 6,
            "doc_present": false,
            "start_line": 292,
            "end_line": 297,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "GetSCCColor",
            "parameters": 1,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 299,
            "end_line": 303,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateSCCCenter",
            "parameters": 2,
            "complexity": 3,
            "length": 10,
            "doc_present": false,
            "start_line": 305,
            "end_line": 314,
            "max_nesting": 2,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CalculateSCCRadius",
            "parameters": 3,
            "complexity": 3,
            "length": 14,
            "doc_present": false,
            "start_line": 316,
            "end_line": 329,
            "max_nesting": 3,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Display",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
        "namespace": "AssemblyChain.Gh.Visualization",
        "loc": 167,
        "sloc": 149,
        "doc_lines": 0,
        "classes": [
          "ACPreviewConduit",
          "PartVis",
          "ZoneVis",
          "RelationshipVis"
        ],
        "methods": [
          {
            "name": "ACPreviewConduit",
            "parameters": 0,
            "complexity": 1,
            "length": 11,
            "doc_present": false,
            "start_line": 12,
            "end_line": 22,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DrawForeground",
            "parameters": 1,
            "complexity": 15,
            "length": 83,
            "doc_present": false,
            "start_line": 67,
            "end_line": 149,
            "max_nesting": 5,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "DrawArrow",
            "parameters": 5,
            "complexity": 2,
            "length": 12,
            "doc_present": false,
            "start_line": 151,
            "end_line": 162,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Rhino.Display",
          "Rhino.Geometry"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/UI/Attributes/ComponentButton.cs",
        "namespace": "AssemblyChain.Gh.Attributes",
        "loc": 81,
        "sloc": 72,
        "doc_lines": 0,
        "classes": [
          "ComponentButton"
        ],
        "methods": [
          {
            "name": "Layout",
            "parameters": 0,
            "complexity": 1,
            "length": 14,
            "doc_present": false,
            "start_line": 25,
            "end_line": 38,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "Render",
            "parameters": 3,
            "complexity": 2,
            "length": 11,
            "doc_present": false,
            "start_line": 40,
            "end_line": 50,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "SetMouseDown",
            "parameters": 4,
            "complexity": 5,
            "length": 9,
            "doc_present": false,
            "start_line": 52,
            "end_line": 60,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RespondToMouseDown",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 62,
            "end_line": 66,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RespondToMouseUp",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 68,
            "end_line": 72,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "RespondToMouseMove",
            "parameters": 2,
            "complexity": 1,
            "length": 5,
            "doc_present": false,
            "start_line": 74,
            "end_line": 78,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Grasshopper.GUI",
          "Grasshopper.GUI.Canvas",
          "Grasshopper.Kernel",
          "Grasshopper.Kernel.Attributes"
        ]
      },
      {
        "path": "AssemblyChain.Grasshopper/UI/ComponentForm.cs",
        "namespace": "AssemblyChain.Gh.UI",
        "loc": 46,
        "sloc": 41,
        "doc_lines": 0,
        "classes": [
          "ComponentForm"
        ],
        "methods": [
          {
            "name": "ComponentForm",
            "parameters": 0,
            "complexity": 1,
            "length": 9,
            "doc_present": false,
            "start_line": 9,
            "end_line": 17,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "CenterOnMouse",
            "parameters": 0,
            "complexity": 1,
            "length": 7,
            "doc_present": false,
            "start_line": 30,
            "end_line": 36,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          },
          {
            "name": "OnClosing",
            "parameters": 1,
            "complexity": 1,
            "length": 6,
            "doc_present": false,
            "start_line": 38,
            "end_line": 43,
            "max_nesting": 1,
            "is_async": false,
            "await_count": 0
          }
        ],
        "await_count": 0,
        "usings": [
          "Eto.Drawing",
          "Eto.Forms"
        ]
      }
    ],
    "dependencies": {
      "AssemblyChain.Core.Contact": [
        "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Graph",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Contact.Detection.BroadPhase": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Contact.Detection.NarrowPhase": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "AssemblyChain.Core.Toolkit",
        "AssemblyChain.Core.Toolkit.Geometry",
        "AssemblyChain.Core.Toolkit.Mesh",
        "AssemblyChain.Core.Toolkit.Utils",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.Common": [],
      "AssemblyChain.Core.Domain.Entities": [
        "AssemblyChain.Core.Domain.Common",
        "AssemblyChain.Core.Domain.ValueObjects",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.Interfaces": [
        "AssemblyChain.Core.Domain.Entities"
      ],
      "AssemblyChain.Core.Domain.Services": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Domain.Interfaces",
        "AssemblyChain.Core.Domain.ValueObjects",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.ValueObjects": [
        "AssemblyChain.Core.Domain.Common",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Graph": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Model": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Toolkit.Utils",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Motion": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Solver": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.BBox": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Brep": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Geometry": [
        "AssemblyChain.Core.Contact",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Intersection": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Math": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Mesh": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Mesh.Preprocessing": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Utils": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Newtonsoft.Json",
        "Newtonsoft.Json.Converters",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Utils": [],
      "AssemblyChain.Gh.Attributes": [
        "Grasshopper.GUI",
        "Grasshopper.GUI.Canvas",
        "Grasshopper.Kernel",
        "Grasshopper.Kernel.Attributes"
      ],
      "AssemblyChain.Gh.Kernel": [
        "AssemblyChain.Core",
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Domain.ValueObjects",
        "AssemblyChain.Core.Model",
        "Grasshopper.Kernel",
        "Grasshopper.Kernel.Data",
        "Grasshopper.Kernel.Types",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Gh.UI": [
        "Eto.Drawing",
        "Eto.Forms"
      ],
      "AssemblyChain.Gh.Visualization": [
        "Rhino.Display",
        "Rhino.Geometry"
      ]
    },
    "dependency_cycles": [
      [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "AssemblyChain.Core.Model",
        "AssemblyChain.Core.Toolkit.Utils",
        "AssemblyChain.Core.Contact"
      ],
      [
        "AssemblyChain.Core.Model",
        "AssemblyChain.Core.Toolkit.Utils",
        "AssemblyChain.Core.Model"
      ],
      [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "AssemblyChain.Core.Contact"
      ],
      [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "AssemblyChain.Core.Toolkit.Geometry",
        "AssemblyChain.Core.Contact"
      ]
    ],
    "duplicates": [
      {
        "hash": "d627e534f5a6822dcd260261ddaba3c3",
        "lines": [
          "Value = goo.Value;",
          "return true;",
          "default:",
          "return base.CastFrom(source);",
          "}",
          "}",
          "public override bool CastTo<T>(ref T target)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhAssemblyWrapGoo.cs",
            "start_line": 49
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhContactModelGoo.cs",
            "start_line": 48
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPartWrapGoo.cs",
            "start_line": 101
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPhysicalPropertyGoo.cs",
            "start_line": 45
          }
        ]
      },
      {
        "hash": "080be1638582bb5d94804133f65790a3",
        "lines": [
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel(",
          "new List<Step>(),",
          "new List<Vector3d>(),",
          "new List<IReadOnlyList<int>>(),",
          "isFeasible: false,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 52
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 46
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 46
          }
        ]
      },
      {
        "hash": "2cf0e4dd64fcc2ba45f359eee5c27fe5",
        "lines": [
          "public DgSolverModel Solve(",
          "AssemblyModel assembly,",
          "ContactModel contacts,",
          "ConstraintModel constraints,",
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 22
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 17
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 17
          }
        ]
      },
      {
        "hash": "3361ed7d0dfe9e259dd2e26cd555237d",
        "lines": [
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 26
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 21
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 21
          }
        ]
      },
      {
        "hash": "37562b5288cbabfac548e1a5931ee734",
        "lines": [
          "}",
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel(",
          "new List<Step>(),",
          "new List<Vector3d>(),",
          "new List<IReadOnlyList<int>>(),"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 51
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 45
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 45
          }
        ]
      },
      {
        "hash": "3ba60e7f006edd37abf8b86f87cbd610",
        "lines": [
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel(",
          "steps,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 28
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 23
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 23
          }
        ]
      },
      {
        "hash": "52b1eae91a7e17baa4595fbe98ea0a01",
        "lines": [
          ");",
          "stopwatch.Stop();",
          "return result;",
          "}",
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel("
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 47
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 41
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 41
          }
        ]
      },
      {
        "hash": "61d265480589ba80eed0f0fde03fa1d1",
        "lines": [
          "AssemblyModel assembly,",
          "ContactModel contacts,",
          "ConstraintModel constraints,",
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 23
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 18
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 18
          }
        ]
      },
      {
        "hash": "6be66792f92371d72ae977503d933fad",
        "lines": [
          "return result;",
          "}",
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel(",
          "new List<Step>(),",
          "new List<Vector3d>(),"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 50
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 44
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 44
          }
        ]
      },
      {
        "hash": "71a67faac8241cdf21b52a03f7f7dbc8",
        "lines": [
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel(",
          "steps,",
          "vectors,",
          "groups,",
          "isFeasible: false,",
          "isOptimal: false,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 34
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 28
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 28
          }
        ]
      },
      {
        "hash": "844f2385758215743c0f623e86a28ef1",
        "lines": [
          "stopwatch.Stop();",
          "return result;",
          "}",
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel(",
          "new List<Step>(),"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 49
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 43
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 43
          }
        ]
      },
      {
        "hash": "88526ce17960f9a71f62bb198a0b2f1b",
        "lines": [
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel("
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 27
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 22
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 22
          }
        ]
      },
      {
        "hash": "90dd3cfc3ddd50152f9e98079314017f",
        "lines": [
          "ContactModel contacts,",
          "ConstraintModel constraints,",
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{",
          "var steps = new List<Step>();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 24
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 19
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 19
          }
        ]
      },
      {
        "hash": "918be1e4fe61a3551bbd2ff11f796755",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Diagnostics;",
          "using System.Linq;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Solver"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 1
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 1
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "a1f9dbf94fb8b0eebf6811f7edbce7dc",
        "lines": [
          "try",
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel(",
          "steps,",
          "vectors,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 30
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 25
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 25
          }
        ]
      },
      {
        "hash": "b1eb7cebf9ef16cb75d2b5eb2c00815d",
        "lines": [
          "{",
          "public DgSolverModel Solve(",
          "AssemblyModel assembly,",
          "ContactModel contacts,",
          "ConstraintModel constraints,",
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 21
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 16
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 16
          }
        ]
      },
      {
        "hash": "ba6baac079a107207be7993b3af6c796",
        "lines": [
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel(",
          "steps,",
          "vectors,",
          "groups,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 31
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 26
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 26
          }
        ]
      },
      {
        "hash": "defe8cd4b3e0a41b4a00bb066afb6568",
        "lines": [
          "{",
          "stopwatch.Stop();",
          "return new DgSolverModel(",
          "new List<Step>(),",
          "new List<Vector3d>(),",
          "new List<IReadOnlyList<int>>(),",
          "isFeasible: false,",
          "isOptimal: false,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 53
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 47
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 47
          }
        ]
      },
      {
        "hash": "e4eb77c44b05389d92f4abe1159418bb",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Diagnostics;",
          "using System.Linq;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Solver",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 2
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 2
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "ebaf5dca53b864ce816967f55101d2cd",
        "lines": [
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();",
          "var groups = new List<IReadOnlyList<int>>();",
          "var result = new DgSolverModel(",
          "steps,",
          "vectors,",
          "groups,",
          "isFeasible: false,"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 33
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 27
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 27
          }
        ]
      },
      {
        "hash": "f02a90392828de0efdb7c33f48afdbba",
        "lines": [
          "metadata: new Dictionary<string, object>()",
          ");",
          "stopwatch.Stop();",
          "return result;",
          "}",
          "catch (Exception ex)",
          "{",
          "stopwatch.Stop();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 46
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 40
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 40
          }
        ]
      },
      {
        "hash": "f037ab2c00d4ba4f90b4364274fd3994",
        "lines": [
          "ConstraintModel constraints,",
          "object options = null)",
          "{",
          "var stopwatch = Stopwatch.StartNew();",
          "try",
          "{",
          "var steps = new List<Step>();",
          "var vectors = new List<Vector3d>();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 25
          },
          {
            "file": "AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 20
          },
          {
            "file": "AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 20
          }
        ]
      },
      {
        "hash": "043681f4574e0f2b281010a996343df3",
        "lines": [
          "{",
          "try",
          "{",
          "var vertices = new Point3d[] {",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 49
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 433
          }
        ]
      },
      {
        "hash": "10d3aa1e7a17ab905475c591d5cd1136",
        "lines": [
          "{",
          "bbox = partBbox;",
          "initialized = true;",
          "}",
          "else",
          "{",
          "bbox.Union(partBbox);",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 71
          },
          {
            "file": "AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 63
          }
        ]
      },
      {
        "hash": "138caadaa91be420969f3469a5d0db4c",
        "lines": [
          "}",
          "}",
          "private void DrawArrow(DrawEventArgs e, Point3d position, Vector3d direction, double size, Color color)",
          "{",
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 268
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 148
          }
        ]
      },
      {
        "hash": "19e788490313bd573ae81a992fe94455",
        "lines": [
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}",
          "return true;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 26
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 26
          }
        ]
      },
      {
        "hash": "1f9ff85eddcff65478fd06ca0a87e83e",
        "lines": [
          "var indices = new int[size];",
          "for (int i = 0; i < size; i++) indices[i] = i;",
          "while (true)",
          "{",
          "yield return indices.Select(i => items[i]).ToArray();",
          "int j = size - 1;",
          "while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "if (j < 0) yield break;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 105
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 66
          }
        ]
      },
      {
        "hash": "2025dfb54df62672e9f93aa442780c6e",
        "lines": [
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 25
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 25
          }
        ]
      },
      {
        "hash": "20e740e9033602177351e6e23fa6130a",
        "lines": [
          "var vector = point - origin;",
          "return Vector3d.Multiply(vector, normal) >= 0;",
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 18
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 18
          }
        ]
      },
      {
        "hash": "237ba1d28ba8bb7a9b5b59eb2487f94c",
        "lines": [
          "{",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 25
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 194
          }
        ]
      },
      {
        "hash": "25a54add87bd8bd5a14715fc4f8da8bb",
        "lines": [
          "return Vector3d.Multiply(vector, normal) >= 0;",
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 19
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 19
          }
        ]
      },
      {
        "hash": "2a194f3c455ec362fbc7596cac9a771f",
        "lines": [
          "}",
          "}",
          "}",
          "private void DrawArrow(DrawEventArgs e, Point3d position, Vector3d direction, double size, Color color)",
          "{",
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 267
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 147
          }
        ]
      },
      {
        "hash": "30343b89b0635ee9c14d592b392e4ad2",
        "lines": [
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;",
          "foreach (var v in vertices)",
          "center += v;",
          "center /= vertices.Count;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 28
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 197
          }
        ]
      },
      {
        "hash": "361e12beeed02906b0ed3c11769004e3",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;",
          "namespace AssemblyChain.Core.Contact.Detection.NarrowPhase"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 2
          },
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "38efdcb574b07f3097501011f2e3f15a",
        "lines": [
          "try",
          "{",
          "var vertices = new Point3d[] {",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 50
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 434
          }
        ]
      },
      {
        "hash": "393e73ed59c77a09db665292a25cfe98",
        "lines": [
          "{",
          "target = (T)(object)Value;",
          "return true;",
          "}",
          "return base.CastTo(ref target);",
          "}",
          "}",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhContactModelGoo.cs",
            "start_line": 58
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPhysicalPropertyGoo.cs",
            "start_line": 55
          }
        ]
      },
      {
        "hash": "3e75a3fe51a5ba4e07dabc70b16b229d",
        "lines": [
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 20
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 20
          }
        ]
      },
      {
        "hash": "42578bc9a7e10df53dd3bc5ae2770f29",
        "lines": [
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();",
          "var arrowHead1 = position + right * size * 0.3 - up * size * 0.3;",
          "var arrowHead2 = position - right * size * 0.3 - up * size * 0.3;",
          "e.Display.DrawLine(position, arrowHead1, color, 1);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 273
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 153
          }
        ]
      },
      {
        "hash": "4e74663ad28640d8a1d15eb8b13950b2",
        "lines": [
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;",
          "namespace AssemblyChain.Core.Contact.Detection.NarrowPhase",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 3
          },
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "51b819ef5dbe4880581f54347e400d1b",
        "lines": [
          "if (!initialized)",
          "{",
          "bbox = partBbox;",
          "initialized = true;",
          "}",
          "else",
          "{",
          "bbox.Union(partBbox);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 70
          },
          {
            "file": "AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 62
          }
        ]
      },
      {
        "hash": "5670fa17a4965a854ef8b8d8300dbbbd",
        "lines": [
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;",
          "foreach (var v in vertices)",
          "center += v;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 27
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 196
          }
        ]
      },
      {
        "hash": "576b455f8ce2bf40b08fc8385cb92626",
        "lines": [
          "bbox = partBbox;",
          "initialized = true;",
          "}",
          "else",
          "{",
          "bbox.Union(partBbox);",
          "}",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 72
          },
          {
            "file": "AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 64
          }
        ]
      },
      {
        "hash": "593453982c70c15f4ae91e7089b1a562",
        "lines": [
          "{",
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();",
          "var arrowHead1 = position + right * size * 0.3 - up * size * 0.3;",
          "var arrowHead2 = position - right * size * 0.3 - up * size * 0.3;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 272
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 152
          }
        ]
      },
      {
        "hash": "65a96db5d573542669a503b2b2ff7682",
        "lines": [
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}",
          "return true;",
          "}",
          "public static IReadOnlyList<Vector3d> FindConeBoundary(IReadOnlyList<Vector3d> constraintNormals)",
          "{",
          "return (constraintNormals ?? Array.Empty<Vector3d>()).ToList();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 30
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 30
          }
        ]
      },
      {
        "hash": "6bc209a6803cf873e3552c94fa50241e",
        "lines": [
          "if (dot < -tolerance) return false;",
          "}",
          "return true;",
          "}",
          "public static IReadOnlyList<Vector3d> FindConeBoundary(IReadOnlyList<Vector3d> constraintNormals)",
          "{",
          "return (constraintNormals ?? Array.Empty<Vector3d>()).ToList();",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 31
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 31
          }
        ]
      },
      {
        "hash": "6dd9eb0659bd70066a89f6a40d7f1385",
        "lines": [
          "{",
          "var vector = point - origin;",
          "return Vector3d.Multiply(vector, normal) >= 0;",
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 17
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 17
          }
        ]
      },
      {
        "hash": "6de8d152240886bc369000038966c5eb",
        "lines": [
          "{",
          "var partBbox = part.BoundingBox;",
          "if (!initialized)",
          "{",
          "bbox = partBbox;",
          "initialized = true;",
          "}",
          "else"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 68
          },
          {
            "file": "AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 60
          }
        ]
      },
      {
        "hash": "76155e5cbc3f1519032edb73ad2cdcc8",
        "lines": [
          "default:",
          "return base.CastFrom(source);",
          "}",
          "}",
          "public override bool CastTo<T>(ref T target)",
          "{",
          "if (Value != null)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhAssemblyWrapGoo.cs",
            "start_line": 51
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPartWrapGoo.cs",
            "start_line": 103
          }
        ]
      },
      {
        "hash": "79283c4bbdca4de5e6b1edfa08b402c7",
        "lines": [
          "{",
          "var vertices = new Point3d[] {",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 51
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 435
          }
        ]
      },
      {
        "hash": "7a6db78b05f2bf18409f1f99c305b1f7",
        "lines": [
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();",
          "var arrowHead1 = position + right * size * 0.3 - up * size * 0.3;",
          "var arrowHead2 = position - right * size * 0.3 - up * size * 0.3;",
          "e.Display.DrawLine(position, arrowHead1, color, 1);",
          "e.Display.DrawLine(position, arrowHead2, color, 1);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 274
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 154
          }
        ]
      },
      {
        "hash": "7c4c34ef0c1f14ea15ba5aaf506286c0",
        "lines": [
          "{",
          "yield return indices.Select(i => items[i]).ToArray();",
          "int j = size - 1;",
          "while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "if (j < 0) yield break;",
          "indices[j]++;",
          "for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 109
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 70
          }
        ]
      },
      {
        "hash": "7effcf0be099c3253ff8f924c4cc5564",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 1
          },
          {
            "file": "AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "83da0db62713b6cf30c2d70b1e613e96",
        "lines": [
          "public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "{",
          "var vector = point - origin;",
          "return Vector3d.Multiply(vector, normal) >= 0;",
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{",
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 16
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 16
          }
        ]
      },
      {
        "hash": "96dfe8d18c25c90af87b7e5a029191ba",
        "lines": [
          "{",
          "public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "{",
          "var vector = point - origin;",
          "return Vector3d.Multiply(vector, normal) >= 0;",
          "}",
          "public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 12
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 12
          }
        ]
      },
      {
        "hash": "96f1cea781ef7fcf9dbbd734a197c496",
        "lines": [
          "for (int i = 0; i < size; i++) indices[i] = i;",
          "while (true)",
          "{",
          "yield return indices.Select(i => items[i]).ToArray();",
          "int j = size - 1;",
          "while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "if (j < 0) yield break;",
          "indices[j]++;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 106
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 67
          }
        ]
      },
      {
        "hash": "9a9a4b7c473726b93348801518e3b96e",
        "lines": [
          "{",
          "var vertices = new List<Point3d>",
          "{",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 23
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 192
          }
        ]
      },
      {
        "hash": "a4549ef96bfe5325c082e917e491e320",
        "lines": [
          "while (true)",
          "{",
          "yield return indices.Select(i => items[i]).ToArray();",
          "int j = size - 1;",
          "while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "if (j < 0) yield break;",
          "indices[j]++;",
          "for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 108
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 69
          }
        ]
      },
      {
        "hash": "a4ce51158a00a8606ecc5986d3aa838d",
        "lines": [
          "if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}",
          "return true;",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 27
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 27
          }
        ]
      },
      {
        "hash": "cd8861cd6a83c121cc79b07201ecd9be",
        "lines": [
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}",
          "return true;",
          "}",
          "public static IReadOnlyList<Vector3d> FindConeBoundary(IReadOnlyList<Vector3d> constraintNormals)",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 29
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 29
          }
        ]
      },
      {
        "hash": "d1e5c6cb10285d048ff5f9a930145f7c",
        "lines": [
          "foreach (var normal in constraintNormals)",
          "{",
          "var dot = Vector3d.Multiply(direction, normal);",
          "if (dot < -tolerance) return false;",
          "}",
          "return true;",
          "}",
          "public static IReadOnlyList<Vector3d> FindConeBoundary(IReadOnlyList<Vector3d> constraintNormals)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 28
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 28
          }
        ]
      },
      {
        "hash": "d26a74c0c4894c5277727229cfd52f95",
        "lines": [
          "private void DrawArrow(DrawEventArgs e, Point3d position, Vector3d direction, double size, Color color)",
          "{",
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();",
          "var arrowHead1 = position + right * size * 0.3 - up * size * 0.3;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 271
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 151
          }
        ]
      },
      {
        "hash": "d59e7d7b98a296570c9f7832d52e7661",
        "lines": [
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();",
          "var arrowHead1 = position + right * size * 0.3 - up * size * 0.3;",
          "var arrowHead2 = position - right * size * 0.3 - up * size * 0.3;",
          "e.Display.DrawLine(position, arrowHead1, color, 1);",
          "e.Display.DrawLine(position, arrowHead2, color, 1);",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 275
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 155
          }
        ]
      },
      {
        "hash": "d6415193f63027b14ccfecd67b306955",
        "lines": [
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;",
          "foreach (var v in vertices)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 26
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 195
          }
        ]
      },
      {
        "hash": "d69000b731c2b0957b93433988e84bbc",
        "lines": [
          "return true;",
          "default:",
          "return base.CastFrom(source);",
          "}",
          "}",
          "public override bool CastTo<T>(ref T target)",
          "{",
          "if (Value != null)"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhAssemblyWrapGoo.cs",
            "start_line": 50
          },
          {
            "file": "AssemblyChain.Grasshopper/Kernel/Goo/AcGhPartWrapGoo.cs",
            "start_line": 102
          }
        ]
      },
      {
        "hash": "dbd7f250338a229c90df0c1af48807fe",
        "lines": [
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;",
          "foreach (var v in vertices)",
          "center += v;",
          "center /= vertices.Count;",
          "return center;"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 29
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 198
          }
        ]
      },
      {
        "hash": "dc82f32cd4780b567fd247424788c26d",
        "lines": [
          "var partBbox = part.BoundingBox;",
          "if (!initialized)",
          "{",
          "bbox = partBbox;",
          "initialized = true;",
          "}",
          "else",
          "{"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 69
          },
          {
            "file": "AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 61
          }
        ]
      },
      {
        "hash": "e756baeffd549cc5b6dc59dad49cc86b",
        "lines": [
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);",
          "var center = Point3d.Origin;",
          "foreach (var v in vertices)",
          "center += v;",
          "center /= vertices.Count;",
          "return center;",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 31
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 200
          }
        ]
      },
      {
        "hash": "eb21bb38bae2e5029fcb55860651c4c1",
        "lines": [
          "var vertices = new List<Point3d>",
          "{",
          "mesh.Vertices[face.A],",
          "mesh.Vertices[face.B],",
          "mesh.Vertices[face.C]",
          "};",
          "if (face.IsQuad)",
          "vertices.Add(mesh.Vertices[face.D]);"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 24
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 193
          }
        ]
      },
      {
        "hash": "f68b0c48378824cd3768b2f823c5fb1f",
        "lines": [
          "}",
          "private void DrawArrow(DrawEventArgs e, Point3d position, Vector3d direction, double size, Color color)",
          "{",
          "var right = Vector3d.CrossProduct(direction, Vector3d.ZAxis);",
          "if (right.IsTiny()) right = Vector3d.CrossProduct(direction, Vector3d.XAxis);",
          "right.Unitize();",
          "var up = Vector3d.CrossProduct(right, direction);",
          "up.Unitize();"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Grasshopper/UI/ACDBGConduit.cs",
            "start_line": 269
          },
          {
            "file": "AssemblyChain.Grasshopper/UI/ACPreviewConduit.cs",
            "start_line": 149
          }
        ]
      },
      {
        "hash": "fc54d58f6aa058080afe6bda65e4abbb",
        "lines": [
          "yield return indices.Select(i => items[i]).ToArray();",
          "int j = size - 1;",
          "while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "if (j < 0) yield break;",
          "indices[j]++;",
          "for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;",
          "}",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 110
          },
          {
            "file": "AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 71
          }
        ]
      },
      {
        "hash": "ff0609189dc120fba2453903d2007867",
        "lines": [
          "}",
          "private static bool TryParsePartIndex(string partId, out int index)",
          "{",
          "if (!string.IsNullOrEmpty(partId) && partId.StartsWith(\"P\") && int.TryParse(partId.Substring(1), out index))",
          "return true;",
          "index = -1;",
          "return false;",
          "}"
        ],
        "occurrences": [
          {
            "file": "AssemblyChain.Core/Contact/ContactModel.cs",
            "start_line": 61
          },
          {
            "file": "AssemblyChain.Grasshopper/Components/3_Solver/AcGhContactZones.cs",
            "start_line": 150
          }
        ]
      }
    ]
  }
}
