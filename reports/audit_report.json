{
  "summary": {
    "files": 66,
    "total_loc": 11623,
    "avg_loc": 176.1060606060606,
    "avg_complexity": 2.18854415274463,
    "max_complexity": 18,
    "avg_doc_ratio": 0.14542960099164087,
    "duplicate_fragments": 138
  },
  "issues": [
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Contact/ContactGraphBuilder.cs has 3/4 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Contact/ContactModel.cs has 5/15 undocumented methods"
    },
    {
      "priority": "P1",
      "type": "LargeFile",
      "message": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs is very large (771 LOC, 16 methods)"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs has 4/16 undocumented methods"
    },
    {
      "priority": "P0",
      "type": "HighComplexity",
      "message": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs:DetectContactsWithIntersectionLines has cyclomatic complexity ~12"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/NarrowPhaseDetection.cs has 1/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/Common/Entity.cs has 3/3 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/Common/ValueObject.cs has 2/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs has 1/12 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/Entities/Joint.cs has 1/5 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/Services/DomainServices.cs has 11/16 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs has 2/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/ValueObjects/PartGeometry.cs has 1/3 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Domain/ValueObjects/PhysicsProperties.cs has 2/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Graph/ConstraintGraphBuilder.cs has 3/4 undocumented methods"
    },
    {
      "priority": "P1",
      "type": "LargeFile",
      "message": "src/AssemblyChain.Core/Graph/GNNAnalyzer.cs is very large (583 LOC, 14 methods)"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Graph/GNNAnalyzer.cs has 2/14 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Graph/GraphViews.cs has 5/5 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/AssemblyModel.cs has 1/1 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/AssemblyModelFactory.cs has 1/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/ConstraintModel.cs has 6/6 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/GraphModel.cs has 7/7 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/MotionModel.cs has 8/8 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Model/SolverModel.cs has 6/6 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs has 5/6 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Motion/PoseEstimator.cs has 2/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Motion/PoseTypes.cs has 1/1 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Solver/CSPSolver.cs has 1/1 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Solver/MILPSolver.cs has 1/1 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Solver/SATSolver.cs has 1/1 undocumented methods"
    },
    {
      "priority": "P1",
      "type": "LargeFile",
      "message": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs is very large (496 LOC, 11 methods)"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs has 5/11 undocumented methods"
    },
    {
      "priority": "P0",
      "type": "HighComplexity",
      "message": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs:DetectCoplanarContacts has cyclomatic complexity ~18"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Math/Clustering.cs has 12/12 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Math/ConvexCone.cs has 22/22 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/MeshPreprocessor.cs has 2/5 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs has 1/12 undocumented methods"
    },
    {
      "priority": "P1",
      "type": "LargeFile",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs is very large (495 LOC, 14 methods)"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs has 10/14 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs has 8/9 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs has 6/9 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Utils/CacheManager.cs has 2/12 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs has 1/2 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Utils/Hashing.cs has 7/10 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Utils/JsonSerializer.cs has 18/18 undocumented methods"
    },
    {
      "priority": "P2",
      "type": "Documentation",
      "message": "src/AssemblyChain.Core/Toolkit/Utils/Tolerance.cs has 16/16 undocumented methods"
    },
    {
      "priority": "P1",
      "type": "Duplication",
      "message": "Detected 138 duplicated code fragments"
    },
    {
      "priority": "P1",
      "type": "Coupling",
      "message": "Namespace dependency graph shows high fan-out; consider modular boundaries."
    }
  ],
  "data": {
    "files": [
      {
        "path": "src/AssemblyChain.Core/Contact/ContactGraphBuilder.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 96,
        "sloc": 83,
        "classes": [
          "ContactGraphBuilder"
        ],
        "methods": [
          {
            "name": "BuildGraph",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              19,
              48
            ]
          },
          {
            "name": "TryParsePartIndex",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              54,
              61
            ]
          },
          {
            "name": "CalculateInDegrees",
            "parameters": 1,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              64,
              75
            ]
          },
          {
            "name": "FindStronglyConnectedComponents",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              78,
              90
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 12,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/ContactModel.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 250,
        "sloc": 217,
        "classes": [
          "ContactModel",
          "ContactData",
          "ContactPair",
          "ContactZone",
          "ContactPlane",
          "MotionConstraint",
          "ContactAnalysisResult",
          "ContactRelation"
        ],
        "methods": [
          {
            "name": "ContactModel",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              21,
              60
            ]
          },
          {
            "name": "TryParsePartIndex",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              63,
              68
            ]
          },
          {
            "name": "GetContactsForPart",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              71,
              74
            ]
          },
          {
            "name": "GetContactsBetweenParts",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              77,
              83
            ]
          },
          {
            "name": "ContactData",
            "parameters": 8,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              91,
              119
            ]
          },
          {
            "name": "ToString",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              117,
              119
            ]
          },
          {
            "name": "ContactPair",
            "parameters": 5,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              126,
              139
            ]
          },
          {
            "name": "ToString",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              136,
              138
            ]
          },
          {
            "name": "ContactZone",
            "parameters": 4,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              156,
              166
            ]
          },
          {
            "name": "ToString",
            "parameters": 0,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              161,
              165
            ]
          },
          {
            "name": "ContactPlane",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              172,
              180
            ]
          },
          {
            "name": "ToString",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              177,
              179
            ]
          },
          {
            "name": "MotionConstraint",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              186,
              194
            ]
          },
          {
            "name": "ToString",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              191,
              193
            ]
          },
          {
            "name": "ContactRelation",
            "parameters": 5,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              238,
              244
            ]
          }
        ],
        "doc_lines": 75,
        "complexity_total": 25,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "loc": 202,
        "sloc": 170,
        "classes": [
          "RTreeBroadPhase",
          "RTreeOptions",
          "RTreeResult"
        ],
        "methods": [
          {
            "name": "Execute",
            "parameters": 2,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              39,
              98
            ]
          },
          {
            "name": "CreateRTree",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              104,
              117
            ]
          },
          {
            "name": "ExpandBoundingBox",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              123,
              142
            ]
          },
          {
            "name": "ExecuteOnMeshes",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              148,
              151
            ]
          },
          {
            "name": "ExecuteOnBreps",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              157,
              160
            ]
          },
          {
            "name": "ExecuteOnGeometry",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              166,
              169
            ]
          },
          {
            "name": "ExecuteWithCustomBoxes",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              175,
              193
            ]
          }
        ],
        "doc_lines": 31,
        "complexity_total": 16,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "loc": 274,
        "sloc": 241,
        "classes": [
          "BroadPhaseFactory",
          "SweepAndPruneAlgorithm",
          "RTreeAlgorithm",
          "SweepAndPrune",
          "SapOptions",
          "SapResult",
          "Endpoint"
        ],
        "methods": [
          {
            "name": "Create",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              18,
              25
            ]
          },
          {
            "name": "Execute",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              102,
              165
            ]
          },
          {
            "name": "CreateEndpoints",
            "parameters": 3,
            "doc_present": true,
            "complexity": 7,
            "line_span": [
              171,
              212
            ]
          },
          {
            "name": "ExecuteOnMeshes",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              228,
              231
            ]
          },
          {
            "name": "ExecuteOnBreps",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              237,
              240
            ]
          },
          {
            "name": "ExecuteOnGeometry",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              246,
              249
            ]
          },
          {
            "name": "ExecuteOnParts",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              255,
              258
            ]
          }
        ],
        "doc_lines": 52,
        "complexity_total": 15,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/ContactDetection.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 116,
        "sloc": 95,
        "classes": [
          "ContactDetection"
        ],
        "methods": [
          {
            "name": "DetectContacts",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              20,
              68
            ]
          },
          {
            "name": "DetectContacts",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              74,
              113
            ]
          }
        ],
        "doc_lines": 9,
        "complexity_total": 6,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/DetectionOptions.cs",
        "namespace": "AssemblyChain.Core.Contact",
        "loc": 50,
        "sloc": 44,
        "classes": [
          "DetectionOptions",
          "ContactDetectionConstants"
        ],
        "methods": [],
        "doc_lines": 6,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 58,
        "sloc": 49,
        "classes": [
          "BrepContactDetector"
        ],
        "methods": [
          {
            "name": "DetectBrepContacts",
            "parameters": 3,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              20,
              54
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 3,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 771,
        "sloc": 643,
        "classes": [
          "MeshContactDetector",
          "EnhancedDetectionOptions",
          "MeshContactTestUtilities"
        ],
        "methods": [
          {
            "name": "CreatePreset",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              52,
              87
            ]
          },
          {
            "name": "Sanitize",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              90,
              102
            ]
          },
          {
            "name": "DetectMeshContactsEnhanced",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              115,
              198
            ]
          },
          {
            "name": "DetectMeshContacts",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              205,
              214
            ]
          },
          {
            "name": "ValidateInputs",
            "parameters": 4,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              218,
              240
            ]
          },
          {
            "name": "ValidateAndFilterContacts",
            "parameters": 3,
            "doc_present": false,
            "complexity": 6,
            "line_span": [
              243,
              274
            ]
          },
          {
            "name": "DetectContactsWithTightInclusion",
            "parameters": 6,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              285,
              352
            ]
          },
          {
            "name": "DetectContactsWithIntersectionLines",
            "parameters": 6,
            "doc_present": true,
            "complexity": 12,
            "line_span": [
              360,
              481
            ]
          },
          {
            "name": "DetectContactsWithSimpleOverlap",
            "parameters": 6,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              489,
              531
            ]
          },
          {
            "name": "GroupCurvesByConnectivity",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              543,
              569
            ]
          },
          {
            "name": "AreCurvesConnected",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              575,
              583
            ]
          },
          {
            "name": "ComputeContactRegions",
            "parameters": 5,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              592,
              627
            ]
          },
          {
            "name": "ComputeEdgeContacts",
            "parameters": 6,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              634,
              669
            ]
          },
          {
            "name": "CreateTestCube",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              687,
              714
            ]
          },
          {
            "name": "RunBasicContactTest",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              720,
              735
            ]
          },
          {
            "name": "RunPerformanceTest",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              741,
              765
            ]
          }
        ],
        "doc_lines": 52,
        "complexity_total": 46,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 117,
        "sloc": 102,
        "classes": [
          "MixedGeoContactDetector"
        ],
        "methods": [
          {
            "name": "DetectMixedGeoContacts",
            "parameters": 3,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              20,
              70
            ]
          }
        ],
        "doc_lines": 9,
        "complexity_total": 3,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/NarrowPhaseDetection.cs",
        "namespace": "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "loc": 78,
        "sloc": 66,
        "classes": [
          "NarrowPhaseDetection"
        ],
        "methods": [
          {
            "name": "DetectContactsForPair",
            "parameters": 6,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              20,
              69
            ]
          },
          {
            "name": "DetectContact",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              73,
              76
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 4,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Common/Entity.cs",
        "namespace": "AssemblyChain.Core.Domain.Common",
        "loc": 49,
        "sloc": 38,
        "classes": [
          "for",
          "Entity"
        ],
        "methods": [
          {
            "name": "Entity",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              15,
              17
            ]
          },
          {
            "name": "Equals",
            "parameters": 1,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              20,
              31
            ]
          },
          {
            "name": "GetHashCode",
            "parameters": 0,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              34,
              48
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 8,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Common/ValueObject.cs",
        "namespace": "AssemblyChain.Core.Domain.Common",
        "loc": 56,
        "sloc": 42,
        "classes": [
          "for",
          "ValueObject"
        ],
        "methods": [
          {
            "name": "Equals",
            "parameters": 1,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              14,
              24
            ]
          },
          {
            "name": "GetHashCode",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              27,
              36
            ]
          }
        ],
        "doc_lines": 3,
        "complexity_total": 4,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 238,
        "sloc": 202,
        "classes": [
          "Assembly"
        ],
        "methods": [
          {
            "name": "UpdateName",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              98,
              103
            ]
          },
          {
            "name": "UpdateDescription",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              109,
              111
            ]
          },
          {
            "name": "AddPart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              117,
              125
            ]
          },
          {
            "name": "RemovePart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              131,
              133
            ]
          },
          {
            "name": "RemovePart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              139,
              142
            ]
          },
          {
            "name": "AddSubAssembly",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              148,
              153
            ]
          },
          {
            "name": "RemoveSubAssembly",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              159,
              161
            ]
          },
          {
            "name": "GetPart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              167,
              180
            ]
          },
          {
            "name": "GetAllParts",
            "parameters": 0,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              186,
              195
            ]
          },
          {
            "name": "GetPhysicsParts",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              201,
              203
            ]
          },
          {
            "name": "IsValid",
            "parameters": 0,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              209,
              217
            ]
          },
          {
            "name": "HasCircularReference",
            "parameters": 1,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              220,
              232
            ]
          }
        ],
        "doc_lines": 63,
        "complexity_total": 30,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Entities/Joint.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 145,
        "sloc": 121,
        "classes": [
          "Joint",
          "JointLimits"
        ],
        "methods": [
          {
            "name": "Activate",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              65,
              67
            ]
          },
          {
            "name": "Deactivate",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              73,
              75
            ]
          },
          {
            "name": "InvolvesPart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              81,
              83
            ]
          },
          {
            "name": "GetOtherPart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              89,
              93
            ]
          },
          {
            "name": "JointLimits",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              129,
              135
            ]
          }
        ],
        "doc_lines": 51,
        "complexity_total": 8,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Entities/Part.cs",
        "namespace": "AssemblyChain.Core.Domain.Entities",
        "loc": 174,
        "sloc": 148,
        "classes": [
          "Part"
        ],
        "methods": [
          {
            "name": "UpdateName",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              102,
              107
            ]
          },
          {
            "name": "UpdateGeometry",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              113,
              115
            ]
          },
          {
            "name": "UpdatePhysics",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              121,
              123
            ]
          },
          {
            "name": "UpdateMaterial",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              129,
              131
            ]
          },
          {
            "name": "WithPhysics",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              137,
              139
            ]
          },
          {
            "name": "WithMaterial",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              145,
              147
            ]
          }
        ],
        "doc_lines": 63,
        "complexity_total": 7,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Interfaces/IAssemblyService.cs",
        "namespace": "AssemblyChain.Core.Domain.Interfaces",
        "loc": 81,
        "sloc": 71,
        "classes": [
          "AssemblyValidationResult",
          "AssemblyProperties",
          "CollisionInfo"
        ],
        "methods": [],
        "doc_lines": 33,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Interfaces/IPartRepository.cs",
        "namespace": "AssemblyChain.Core.Domain.Interfaces",
        "loc": 57,
        "sloc": 48,
        "classes": [],
        "methods": [],
        "doc_lines": 30,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/Services/DomainServices.cs",
        "namespace": "AssemblyChain.Core.Domain.Services",
        "loc": 303,
        "sloc": 256,
        "classes": [
          "DomainServices",
          "DisassemblyAnalysis",
          "AssemblySequence",
          "AssemblyStep",
          "ValidationResult",
          "StabilityAnalysis"
        ],
        "methods": [
          {
            "name": "DomainServices",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              20,
              23
            ]
          },
          {
            "name": "AnalyzeDisassemblySequenceAsync",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              29,
              56
            ]
          },
          {
            "name": "FindBlockingPartsAsync",
            "parameters": 3,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              62,
              78
            ]
          },
          {
            "name": "CalculateOptimalSequenceAsync",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              84,
              118
            ]
          },
          {
            "name": "ValidatePart",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              124,
              156
            ]
          },
          {
            "name": "AnalyzeStabilityAsync",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              162,
              185
            ]
          },
          {
            "name": "PartsIntersectAsync",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              188,
              196
            ]
          },
          {
            "name": "IsBlocking",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              199,
              205
            ]
          },
          {
            "name": "CalculateCenterOfMass",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              208,
              211
            ]
          },
          {
            "name": "CalculateSupportPolygon",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              214,
              228
            ]
          },
          {
            "name": "AddError",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              241,
              242
            ]
          },
          {
            "name": "AddStep",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              253,
              255
            ]
          },
          {
            "name": "AddError",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              258,
              259
            ]
          },
          {
            "name": "AssemblyStep",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              270,
              274
            ]
          },
          {
            "name": "AddError",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              288,
              290
            ]
          },
          {
            "name": "AddWarning",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              289,
              290
            ]
          }
        ],
        "doc_lines": 33,
        "complexity_total": 29,
        "await_count": 3
      },
      {
        "path": "src/AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 93,
        "sloc": 79,
        "classes": [
          "MaterialProperties"
        ],
        "methods": [
          {
            "name": "MaterialProperties",
            "parameters": 9,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              57,
              67
            ]
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              72,
              82
            ]
          }
        ],
        "doc_lines": 30,
        "complexity_total": 2,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/ValueObjects/PartGeometry.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 89,
        "sloc": 76,
        "classes": [
          "PartGeometry"
        ],
        "methods": [
          {
            "name": "PartGeometry",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              51,
              58
            ]
          },
          {
            "name": "PartGeometry",
            "parameters": 5,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              64,
              71
            ]
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              79,
              84
            ]
          }
        ],
        "doc_lines": 33,
        "complexity_total": 4,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Domain/ValueObjects/PhysicsProperties.cs",
        "namespace": "AssemblyChain.Core.Domain.ValueObjects",
        "loc": 61,
        "sloc": 51,
        "classes": [
          "PhysicsProperties"
        ],
        "methods": [
          {
            "name": "PhysicsProperties",
            "parameters": 5,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              37,
              43
            ]
          },
          {
            "name": "GetEqualityComponents",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              47,
              53
            ]
          }
        ],
        "doc_lines": 18,
        "complexity_total": 2,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Graph/ConstraintGraphBuilder.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 139,
        "sloc": 113,
        "classes": [
          "ConstraintGraphBuilder"
        ],
        "methods": [
          {
            "name": "BuildConstraints",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              17,
              34
            ]
          },
          {
            "name": "BuildPartConstraints",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              39,
              71
            ]
          },
          {
            "name": "BuildGroupConstraints",
            "parameters": 2,
            "doc_present": false,
            "complexity": 5,
            "line_span": [
              75,
              116
            ]
          },
          {
            "name": "CheckExternalBlocking",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              120,
              133
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 12,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Graph/GNNAnalyzer.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 583,
        "sloc": 494,
        "classes": [
          "GNNAnalyzer",
          "NodeFeatures",
          "GNNAnalysisResult"
        ],
        "methods": [
          {
            "name": "Analyze",
            "parameters": 3,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              25,
              51
            ]
          },
          {
            "name": "UpdateAnalysis",
            "parameters": 4,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              59,
              114
            ]
          },
          {
            "name": "InitializeNodeFeatures",
            "parameters": 3,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              123,
              161
            ]
          },
          {
            "name": "UpdateNodeFeatures",
            "parameters": 4,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              170,
              172
            ]
          },
          {
            "name": "UpdateNodeFeaturesIncrementally",
            "parameters": 5,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              181,
              239
            ]
          },
          {
            "name": "CalculateMessage",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              249,
              261
            ]
          },
          {
            "name": "HasConverged",
            "parameters": 4,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              267,
              280
            ]
          },
          {
            "name": "ComputeSingleScores",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              287,
              297
            ]
          },
          {
            "name": "ComputeSingleScore",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              304,
              313
            ]
          },
          {
            "name": "CalculatePairAffinity",
            "parameters": 5,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              398,
              434
            ]
          },
          {
            "name": "CalculateSurfaceArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              442,
              469
            ]
          },
          {
            "name": "CalculateExposureScore",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              475,
              515
            ]
          },
          {
            "name": "Clone",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              532,
              543
            ]
          },
          {
            "name": "GNNAnalysisResult",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              556,
              558
            ]
          }
        ],
        "doc_lines": 55,
        "complexity_total": 33,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Graph/GraphOptions.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 14,
        "sloc": 12,
        "classes": [
          "struct"
        ],
        "methods": [],
        "doc_lines": 3,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Graph/GraphViews.cs",
        "namespace": "AssemblyChain.Core.Graph",
        "loc": 76,
        "sloc": 62,
        "classes": [
          "namespace",
          "GraphViews",
          "Dbg",
          "BlockingEdge",
          "DirectionalBlockingGraph",
          "AssemblyGraph",
          "Node"
        ],
        "methods": [
          {
            "name": "BuildDbgForDirections",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              13,
              16
            ]
          },
          {
            "name": "BlockingEdge",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              30,
              33
            ]
          },
          {
            "name": "GetBlockingScore",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              53,
              54
            ]
          },
          {
            "name": "Node",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              61,
              61
            ]
          },
          {
            "name": "AssemblyGraph",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              67,
              70
            ]
          }
        ],
        "doc_lines": 0,
        "complexity_total": 5,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/AssemblyModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 86,
        "sloc": 73,
        "classes": [
          "AssemblyModel"
        ],
        "methods": [
          {
            "name": "AssemblyModel",
            "parameters": 3,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              50,
              80
            ]
          }
        ],
        "doc_lines": 25,
        "complexity_total": 3,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/AssemblyModelFactory.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 42,
        "sloc": 39,
        "classes": [
          "AssemblyModelFactory"
        ],
        "methods": [
          {
            "name": "Create",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              21,
              31
            ]
          },
          {
            "name": "MaterializeParts",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              34,
              39
            ]
          }
        ],
        "doc_lines": 9,
        "complexity_total": 3,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/ConstraintModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 72,
        "sloc": 62,
        "classes": [
          "ConstraintModel"
        ],
        "methods": [
          {
            "name": "ConstraintModel",
            "parameters": 7,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              20,
              26
            ]
          },
          {
            "name": "GetPartConstraints",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              34,
              36
            ]
          },
          {
            "name": "GetGroupConstraints",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              39,
              41
            ]
          },
          {
            "name": "GetGroupConstraints",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              44,
              48
            ]
          },
          {
            "name": "CanPartMove",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              51,
              55
            ]
          },
          {
            "name": "CanGroupMove",
            "parameters": 3,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              58,
              66
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 9,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/GraphModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 82,
        "sloc": 73,
        "classes": [
          "GraphModel",
          "BlockingGraph",
          "NonDirectionalBlockingGraph",
          "BlockingEdge",
          "StronglyConnectedComponent"
        ],
        "methods": [
          {
            "name": "GraphModel",
            "parameters": 7,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              25,
              32
            ]
          },
          {
            "name": "GetInDegree",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              41,
              43
            ]
          },
          {
            "name": "GetFreeParts",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              46,
              48
            ]
          },
          {
            "name": "GetComponentForNode",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              51,
              53
            ]
          },
          {
            "name": "AreInSameComponent",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              56,
              60
            ]
          },
          {
            "name": "StronglyConnectedComponent",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              73,
              73
            ]
          },
          {
            "name": "StronglyConnectedComponent",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              74,
              78
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 8,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/MotionModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 86,
        "sloc": 72,
        "classes": [
          "MotionModel"
        ],
        "methods": [
          {
            "name": "MotionModel",
            "parameters": 5,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              20,
              24
            ]
          },
          {
            "name": "GetPartMotionRays",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              30,
              32
            ]
          },
          {
            "name": "GetGroupMotionRays",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              35,
              39
            ]
          },
          {
            "name": "GetGroupMotionRays",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              42,
              44
            ]
          },
          {
            "name": "IsMotionFeasible",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              47,
              57
            ]
          },
          {
            "name": "IsGroupMotionFeasible",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              60,
              70
            ]
          },
          {
            "name": "GetAllGroupKeys",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              73,
              75
            ]
          },
          {
            "name": "ParseGroupKey",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              78,
              80
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 14,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Model/SolverModel.cs",
        "namespace": "AssemblyChain.Core.Model",
        "loc": 131,
        "sloc": 117,
        "classes": [
          "DgSolverModel",
          "Step"
        ],
        "methods": [
          {
            "name": "DgSolverModel",
            "parameters": 11,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              27,
              40
            ]
          },
          {
            "name": "GetStep",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              53,
              57
            ]
          },
          {
            "name": "GetVector",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              60,
              64
            ]
          },
          {
            "name": "ToAssemblySequence",
            "parameters": 0,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              67,
              102
            ]
          },
          {
            "name": "GetSummary",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              105,
              109
            ]
          },
          {
            "name": "Step",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              116,
              120
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 11,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 58,
        "sloc": 51,
        "classes": [
          "ConeIntersection"
        ],
        "methods": [
          {
            "name": "IsPointInHalfspace",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              16,
              19
            ]
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              25,
              33
            ]
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              39,
              41
            ]
          },
          {
            "name": "ComputeExtremeRays",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              47,
              50
            ]
          }
        ],
        "doc_lines": 15,
        "complexity_total": 8,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 123,
        "sloc": 101,
        "classes": [
          "MotionEvaluator"
        ],
        "methods": [
          {
            "name": "EvaluateMotion",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              18,
              23
            ]
          },
          {
            "name": "ComputePartMotionRays",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              28,
              40
            ]
          },
          {
            "name": "ComputeMotionRaysForPart",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              44,
              57
            ]
          },
          {
            "name": "ComputeGroupMotionRays",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              61,
              76
            ]
          },
          {
            "name": "ComputeMotionRaysForGroup",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              80,
              96
            ]
          },
          {
            "name": "GenerateCombinations",
            "parameters": 2,
            "doc_present": false,
            "complexity": 7,
            "line_span": [
              100,
              117
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 20,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Motion/MotionOptions.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 15,
        "sloc": 13,
        "classes": [
          "struct"
        ],
        "methods": [],
        "doc_lines": 3,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Motion/PoseEstimator.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 26,
        "sloc": 22,
        "classes": [
          "PoseEstimator"
        ],
        "methods": [
          {
            "name": "PoseEstimator",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              12,
              15
            ]
          },
          {
            "name": "GenerateCandidates",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              18,
              22
            ]
          }
        ],
        "doc_lines": 0,
        "complexity_total": 2,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Motion/PoseTypes.cs",
        "namespace": "AssemblyChain.Core.Motion",
        "loc": 16,
        "sloc": 14,
        "classes": [
          "PoseCandidate"
        ],
        "methods": [
          {
            "name": "PoseCandidate",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              9,
              12
            ]
          }
        ],
        "doc_lines": 0,
        "complexity_total": 1,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 72,
        "sloc": 65,
        "classes": [
          "CSPsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              22,
              63
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 1,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 65,
        "sloc": 59,
        "classes": [
          "MILPsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              17,
              56
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 1,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Solver/SATSolver.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 65,
        "sloc": 59,
        "classes": [
          "SATsolver"
        ],
        "methods": [
          {
            "name": "Solve",
            "parameters": 4,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              17,
              56
            ]
          }
        ],
        "doc_lines": 4,
        "complexity_total": 1,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Solver/SolverOptions.cs",
        "namespace": "AssemblyChain.Core.Solver",
        "loc": 29,
        "sloc": 26,
        "classes": [
          "struct"
        ],
        "methods": [],
        "doc_lines": 6,
        "complexity_total": 0,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/BBox/BoundingHelpers.cs",
        "namespace": "AssemblyChain.Core.Toolkit.BBox",
        "loc": 287,
        "sloc": 254,
        "classes": [
          "BoundingHelpers",
          "ExpansionOptions",
          "VoxelOptions"
        ],
        "methods": [
          {
            "name": "ExpandBoundingBox",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              40,
              70
            ]
          },
          {
            "name": "IntersectBoundingBoxes",
            "parameters": 1,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              76,
              96
            ]
          },
          {
            "name": "UnionBoundingBoxes",
            "parameters": 1,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              102,
              122
            ]
          },
          {
            "name": "BoundingBoxesIntersect",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              128,
              137
            ]
          },
          {
            "name": "BoundingBoxSurfaceArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              143,
              147
            ]
          },
          {
            "name": "BoundingBoxVolume",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              153,
              157
            ]
          },
          {
            "name": "VoxelizeBoundingBox",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              163,
              204
            ]
          },
          {
            "name": "IsOnBoundary",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              210,
              216
            ]
          },
          {
            "name": "CreateBoundingBox",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              222,
              230
            ]
          },
          {
            "name": "BoundingBoxCenter",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              236,
              243
            ]
          },
          {
            "name": "BoundingBoxSize",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              249,
              256
            ]
          },
          {
            "name": "ContainsPoint",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              262,
              267
            ]
          },
          {
            "name": "BoundingBoxAspectRatio",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              273,
              281
            ]
          }
        ],
        "doc_lines": 48,
        "complexity_total": 34,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Brep",
        "loc": 302,
        "sloc": 259,
        "classes": [
          "BrepUtilities",
          "BrepOptions",
          "ProcessingResult"
        ],
        "methods": [
          {
            "name": "ProcessBrep",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              41,
              100
            ]
          },
          {
            "name": "SplitIntersectingFaces",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              106,
              119
            ]
          },
          {
            "name": "MergeCoplanarFaces",
            "parameters": 2,
            "doc_present": true,
            "complexity": 9,
            "line_span": [
              125,
              162
            ]
          },
          {
            "name": "AreCoplanar",
            "parameters": 3,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              168,
              178
            ]
          },
          {
            "name": "AreAdjacentFaces",
            "parameters": 3,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              184,
              200
            ]
          },
          {
            "name": "DetectClosureIssues",
            "parameters": 2,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              206,
              222
            ]
          },
          {
            "name": "HasSelfIntersections",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              228,
              231
            ]
          }
        ],
        "doc_lines": 39,
        "complexity_total": 28,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Brep",
        "loc": 496,
        "sloc": 415,
        "classes": [
          "PlanarOps",
          "PlanarOptions",
          "PlanarResult",
          "PlaneComparer",
          "CoplanarContactResult"
        ],
        "methods": [
          {
            "name": "ExtractPlanarFaces",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              43,
              91
            ]
          },
          {
            "name": "ExtractFacePlane",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              97,
              115
            ]
          },
          {
            "name": "FitPlaneToFace",
            "parameters": 1,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              121,
              160
            ]
          },
          {
            "name": "ProjectFaceTo2D",
            "parameters": 2,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              246,
              290
            ]
          },
          {
            "name": "Union2DPolygons",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              293,
              295
            ]
          },
          {
            "name": "AreCoplanar",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              298,
              309
            ]
          },
          {
            "name": "PlaneComparer",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              316,
              318
            ]
          },
          {
            "name": "Equals",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              321,
              323
            ]
          },
          {
            "name": "GetHashCode",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              326,
              328
            ]
          },
          {
            "name": "DetectCoplanarContacts",
            "parameters": 5,
            "doc_present": true,
            "complexity": 18,
            "line_span": [
              348,
              461
            ]
          },
          {
            "name": "MakeContact",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              472,
              492
            ]
          }
        ],
        "doc_lines": 36,
        "complexity_total": 43,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Geometry",
        "loc": 235,
        "sloc": 209,
        "classes": [
          "MeshGeometry"
        ],
        "methods": [
          {
            "name": "CalculateFaceCenter",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              22,
              39
            ]
          },
          {
            "name": "CalculateFaceArea",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              48,
              74
            ]
          },
          {
            "name": "CalculateTriangleArea",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              80,
              85
            ]
          },
          {
            "name": "GetFaceNormal",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              94,
              103
            ]
          },
          {
            "name": "CalculateMinDistance",
            "parameters": 3,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              113,
              152
            ]
          },
          {
            "name": "ApproximateArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              160,
              172
            ]
          },
          {
            "name": "ComputeGeometryArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              180,
              205
            ]
          },
          {
            "name": "InferContactPlane",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              213,
              232
            ]
          }
        ],
        "doc_lines": 47,
        "complexity_total": 18,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Geometry",
        "loc": 341,
        "sloc": 293,
        "classes": [
          "PlaneOperations"
        ],
        "methods": [
          {
            "name": "GroupFacesByPlanes",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              21,
              47
            ]
          },
          {
            "name": "ArePlanesCoplanar",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              57,
              64
            ]
          },
          {
            "name": "FitPlaneFromCurves",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              73,
              95
            ]
          },
          {
            "name": "AreFacesCoplanarAndClose",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              105,
              116
            ]
          },
          {
            "name": "GetFacePlane",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              125,
              151
            ]
          },
          {
            "name": "ComputeFaceIntersectionGeometry",
            "parameters": 6,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              164,
              214
            ]
          },
          {
            "name": "GetFaceVertices",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              223,
              230
            ]
          },
          {
            "name": "ProjectPolylineToPlane",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              239,
              249
            ]
          },
          {
            "name": "ComputePolygonIntersection2D",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              259,
              280
            ]
          },
          {
            "name": "ConvertPolygon2DTo3D",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              289,
              292
            ]
          }
        ],
        "doc_lines": 75,
        "complexity_total": 25,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Intersection",
        "loc": 308,
        "sloc": 268,
        "classes": [
          "BrepBrepIntersect",
          "IntersectionOptions",
          "IntersectionResult"
        ],
        "methods": [
          {
            "name": "ComputeIntersection",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              42,
              87
            ]
          },
          {
            "name": "ComputeSurfaceIntersections",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              96,
              116
            ]
          },
          {
            "name": "MergeCoplanarIntersections",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              125,
              171
            ]
          },
          {
            "name": "CanMergeCurves",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              179,
              197
            ]
          },
          {
            "name": "MergeCurveGroup",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              203,
              214
            ]
          },
          {
            "name": "ExtractPointsFromCurves",
            "parameters": 3,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              220,
              245
            ]
          },
          {
            "name": "SamplePointsOnCurve",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              254,
              277
            ]
          },
          {
            "name": "ComputeMultipleIntersections",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              283,
              299
            ]
          }
        ],
        "doc_lines": 33,
        "complexity_total": 20,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Intersection",
        "loc": 366,
        "sloc": 317,
        "classes": [
          "MeshMeshIntersect",
          "IntersectionOptions",
          "IntersectionResult",
          "ContactDetectionResult"
        ],
        "methods": [
          {
            "name": "DetectContactsBasedOnIntersection",
            "parameters": 5,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              60,
              111
            ]
          },
          {
            "name": "ComputeIntersection",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              122,
              198
            ]
          },
          {
            "name": "ExtractPointsFromIntersections",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              207,
              246
            ]
          },
          {
            "name": "ComputeMultipleIntersections",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              254,
              270
            ]
          },
          {
            "name": "BoundingBoxCheck",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              278,
              285
            ]
          },
          {
            "name": "ApproximateIntersection",
            "parameters": 4,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              291,
              335
            ]
          },
          {
            "name": "SamplePointsInBoundingBox",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              345,
              359
            ]
          }
        ],
        "doc_lines": 33,
        "complexity_total": 18,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Math/Clustering.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 317,
        "sloc": 291,
        "classes": [
          "Clustering",
          "KMeansOptions",
          "KMeansResult"
        ],
        "methods": [
          {
            "name": "KMeans",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              31,
              81
            ]
          },
          {
            "name": "InitializeKMeansPlusPlus",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              84,
              114
            ]
          },
          {
            "name": "InitializeRandom",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              117,
              127
            ]
          },
          {
            "name": "FindNearestCentroid",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              130,
              143
            ]
          },
          {
            "name": "UpdateCentroids",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              146,
              169
            ]
          },
          {
            "name": "CalculateInertia",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              172,
              181
            ]
          },
          {
            "name": "HierarchicalClustering",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              184,
              210
            ]
          },
          {
            "name": "ClusterDistance",
            "parameters": 2,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              213,
              224
            ]
          },
          {
            "name": "DBSCAN",
            "parameters": 3,
            "doc_present": false,
            "complexity": 5,
            "line_span": [
              227,
              268
            ]
          },
          {
            "name": "FindNeighbors",
            "parameters": 3,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              271,
              279
            ]
          },
          {
            "name": "SilhouetteScore",
            "parameters": 3,
            "doc_present": false,
            "complexity": 5,
            "line_span": [
              282,
              300
            ]
          },
          {
            "name": "AverageDistanceToCluster",
            "parameters": 4,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              303,
              311
            ]
          }
        ],
        "doc_lines": 3,
        "complexity_total": 39,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Math/ConvexCone.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 194,
        "sloc": 170,
        "classes": [
          "ConvexCone",
          "Halfspace",
          "Cone"
        ],
        "methods": [
          {
            "name": "Halfspace",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              21,
              25
            ]
          },
          {
            "name": "Halfspace",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              28,
              32
            ]
          },
          {
            "name": "SignedDistance",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              35,
              37
            ]
          },
          {
            "name": "Contains",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              40,
              42
            ]
          },
          {
            "name": "AddHalfspace",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              53,
              58
            ]
          },
          {
            "name": "AddHalfspace",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              54,
              58
            ]
          },
          {
            "name": "Contains",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              55,
              58
            ]
          },
          {
            "name": "IsEmpty",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              56,
              58
            ]
          },
          {
            "name": "GetExtremeRays",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              57,
              58
            ]
          },
          {
            "name": "CreateHalfspaceFromContact",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              60,
              62
            ]
          },
          {
            "name": "CreateConeFromContacts",
            "parameters": 1,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              65,
              73
            ]
          },
          {
            "name": "IntersectCones",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              76,
              81
            ]
          },
          {
            "name": "ComputeExtremeRays",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              84,
              86
            ]
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              89,
              91
            ]
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              94,
              96
            ]
          },
          {
            "name": "ComputeDualCone",
            "parameters": 1,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              99,
              107
            ]
          },
          {
            "name": "IsPointed",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              110,
              113
            ]
          },
          {
            "name": "GetDimension",
            "parameters": 1,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              116,
              122
            ]
          },
          {
            "name": "AreCoplanar",
            "parameters": 1,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              125,
              136
            ]
          },
          {
            "name": "GenerateMotionRays",
            "parameters": 3,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              139,
              159
            ]
          },
          {
            "name": "Slerp",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              162,
              171
            ]
          },
          {
            "name": "GenerateUniformRays",
            "parameters": 1,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              174,
              188
            ]
          }
        ],
        "doc_lines": 9,
        "complexity_total": 40,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Math/LinearAlgebra.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Math",
        "loc": 173,
        "sloc": 158,
        "classes": [
          "LinearAlgebra"
        ],
        "methods": [
          {
            "name": "GramSchmidtOrthogonalize",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              16,
              37
            ]
          },
          {
            "name": "ProjectOnto",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              43,
              48
            ]
          },
          {
            "name": "OrthogonalComplement",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              54,
              61
            ]
          },
          {
            "name": "AngleBetween",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              67,
              74
            ]
          },
          {
            "name": "AreLinearlyDependent",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              80,
              84
            ]
          },
          {
            "name": "Determinant",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              90,
              94
            ]
          },
          {
            "name": "SolveLinearSystem",
            "parameters": 4,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              100,
              107
            ]
          },
          {
            "name": "Rank",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              113,
              117
            ]
          },
          {
            "name": "NullSpace",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              123,
              126
            ]
          },
          {
            "name": "NullSpace",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              132,
              142
            ]
          }
        ],
        "doc_lines": 37,
        "complexity_total": 18,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/MeshPreprocessor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 353,
        "sloc": 312,
        "classes": [
          "MeshPreprocessor",
          "PreprocessingOptions",
          "PreprocessingResult"
        ],
        "methods": [
          {
            "name": "CreateBalanced",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              33,
              42
            ]
          },
          {
            "name": "CreateFast",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              45,
              54
            ]
          },
          {
            "name": "PreprocessMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              82,
              197
            ]
          },
          {
            "name": "CreatePreprocessedMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              203,
              254
            ]
          },
          {
            "name": "GenerateReport",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              308,
              350
            ]
          }
        ],
        "doc_lines": 19,
        "complexity_total": 8,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 211,
        "sloc": 185,
        "classes": [
          "MeshSpatialIndex"
        ],
        "methods": [
          {
            "name": "MeshSpatialIndex",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              24,
              33
            ]
          },
          {
            "name": "BuildIndex",
            "parameters": 0,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              39,
              51
            ]
          },
          {
            "name": "GetNearbyFaces",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              60,
              74
            ]
          },
          {
            "name": "GetFacesInRegion",
            "parameters": 1,
            "doc_present": true,
            "complexity": 7,
            "line_span": [
              82,
              116
            ]
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              122,
              131
            ]
          },
          {
            "name": "GetCellKey",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              137,
              144
            ]
          },
          {
            "name": "GetXFromKey",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              150,
              210
            ]
          },
          {
            "name": "GetYFromKey",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              151,
              210
            ]
          },
          {
            "name": "GetZFromKey",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              152,
              210
            ]
          },
          {
            "name": "GetCellKeyFromXYZ",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              157,
              159
            ]
          },
          {
            "name": "GetNearbyCells",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              165,
              185
            ]
          },
          {
            "name": "CalculateFaceCenter",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              191,
              208
            ]
          }
        ],
        "doc_lines": 41,
        "complexity_total": 26,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh",
        "loc": 223,
        "sloc": 194,
        "classes": [
          "MeshToBrep",
          "ConversionOptions",
          "ConversionResult"
        ],
        "methods": [
          {
            "name": "ConvertToBrep",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              41,
              87
            ]
          },
          {
            "name": "ComputeMeshArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              128,
              165
            ]
          },
          {
            "name": "ComputeBrepArea",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              171,
              184
            ]
          },
          {
            "name": "ValidateConversion",
            "parameters": 4,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              190,
              216
            ]
          }
        ],
        "doc_lines": 28,
        "complexity_total": 11,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 495,
        "sloc": 436,
        "classes": [
          "MeshOptimizer",
          "OptimizationOptions",
          "OptimizationResult",
          "Point3dComparer"
        ],
        "methods": [
          {
            "name": "OptimizeMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              47,
              99
            ]
          },
          {
            "name": "WeldDuplicateVertices",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              102,
              119
            ]
          },
          {
            "name": "ReduceVertices",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              122,
              196
            ]
          },
          {
            "name": "UnifyMeshNormals",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              199,
              209
            ]
          },
          {
            "name": "SmoothMesh",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              212,
              258
            ]
          },
          {
            "name": "RemoveRedundantVertices",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              264,
              295
            ]
          },
          {
            "name": "SimplifyMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              301,
              348
            ]
          },
          {
            "name": "ImproveMeshQuality",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              354,
              391
            ]
          },
          {
            "name": "UpdateFacesReferencingVertex",
            "parameters": 3,
            "doc_present": false,
            "complexity": 6,
            "line_span": [
              394,
              405
            ]
          },
          {
            "name": "GetVertexNeighbors",
            "parameters": 2,
            "doc_present": false,
            "complexity": 4,
            "line_span": [
              408,
              429
            ]
          },
          {
            "name": "CalculateFaceArea",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              432,
              467
            ]
          },
          {
            "name": "Point3dComparer",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              474,
              476
            ]
          },
          {
            "name": "Equals",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              479,
              481
            ]
          },
          {
            "name": "GetHashCode",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              484,
              491
            ]
          }
        ],
        "doc_lines": 23,
        "complexity_total": 31,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 369,
        "sloc": 329,
        "classes": [
          "MeshRepair",
          "RepairOptions",
          "RepairResult"
        ],
        "methods": [
          {
            "name": "RepairMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              43,
              82
            ]
          },
          {
            "name": "FillMeshHoles",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              85,
              138
            ]
          },
          {
            "name": "FixNonManifoldEdges",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              141,
              161
            ]
          },
          {
            "name": "RemoveDuplicateFaces",
            "parameters": 3,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              164,
              202
            ]
          },
          {
            "name": "HealNakedEdges",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              205,
              209
            ]
          },
          {
            "name": "GroupNakedEdgesIntoLoops",
            "parameters": 2,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              212,
              289
            ]
          },
          {
            "name": "CalculateLoopArea",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              292,
              319
            ]
          },
          {
            "name": "TryFillHole",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              322,
              350
            ]
          },
          {
            "name": "GetFaceSignature",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              353,
              366
            ]
          }
        ],
        "doc_lines": 12,
        "complexity_total": 19,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
        "loc": 341,
        "sloc": 304,
        "classes": [
          "MeshValidator",
          "ValidationOptions",
          "ValidationResult"
        ],
        "methods": [
          {
            "name": "ValidateMesh",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              42,
              103
            ]
          },
          {
            "name": "FinalValidation",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              109,
              112
            ]
          },
          {
            "name": "ValidateMeshForContactDetection",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              118,
              122
            ]
          },
          {
            "name": "CheckTopology",
            "parameters": 3,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              125,
              151
            ]
          },
          {
            "name": "CheckDegenerateFaces",
            "parameters": 3,
            "doc_present": false,
            "complexity": 5,
            "line_span": [
              154,
              188
            ]
          },
          {
            "name": "CheckNormals",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              191,
              235
            ]
          },
          {
            "name": "CheckBoundingBox",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              238,
              267
            ]
          },
          {
            "name": "IsDegenerateFace",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              270,
              315
            ]
          },
          {
            "name": "FindDuplicateFaces",
            "parameters": 1,
            "doc_present": false,
            "complexity": 3,
            "line_span": [
              318,
              338
            ]
          }
        ],
        "doc_lines": 18,
        "complexity_total": 19,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/CacheManager.cs",
        "namespace": "AssemblyChain.Core.Utils",
        "loc": 230,
        "sloc": 209,
        "classes": [
          "CacheManager",
          "CacheItem",
          "CacheStatistics",
          "GlobalCache"
        ],
        "methods": [
          {
            "name": "CacheManager",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              21,
              26
            ]
          },
          {
            "name": "Get",
            "parameters": 1,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              32,
              44
            ]
          },
          {
            "name": "Set",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              50,
              62
            ]
          },
          {
            "name": "GetOrCreate",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              68,
              74
            ]
          },
          {
            "name": "GetOrCreateAsync",
            "parameters": 3,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              80,
              86
            ]
          },
          {
            "name": "Remove",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              92,
              95
            ]
          },
          {
            "name": "Clear",
            "parameters": 0,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              101,
              104
            ]
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              110,
              123
            ]
          },
          {
            "name": "CleanupExpiredItems",
            "parameters": 1,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              129,
              139
            ]
          },
          {
            "name": "CleanupOldItems",
            "parameters": 0,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              145,
              158
            ]
          },
          {
            "name": "EstimateMemoryUsage",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              164,
              168
            ]
          },
          {
            "name": "Dispose",
            "parameters": 0,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              171,
              176
            ]
          }
        ],
        "doc_lines": 46,
        "complexity_total": 27,
        "await_count": 1
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/ContactDetectionHelpers.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 26,
        "sloc": 25,
        "classes": [
          "ContactDetectionHelpers"
        ],
        "methods": [
          {
            "name": "IsContactBlocking",
            "parameters": 2,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              15,
              23
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 2,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 81,
        "sloc": 72,
        "classes": [
          "ExtremeRayExtractor"
        ],
        "methods": [
          {
            "name": "Extract",
            "parameters": 2,
            "doc_present": true,
            "complexity": 6,
            "line_span": [
              16,
              42
            ]
          },
          {
            "name": "SampleRaysEvenly",
            "parameters": 2,
            "doc_present": false,
            "complexity": 6,
            "line_span": [
              45,
              75
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 12,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 118,
        "sloc": 103,
        "classes": [
          "GroupCandidates"
        ],
        "methods": [
          {
            "name": "GenerateCandidates",
            "parameters": 2,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              16,
              43
            ]
          },
          {
            "name": "GenerateSubgroups",
            "parameters": 2,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              49,
              57
            ]
          },
          {
            "name": "GenerateCombinations",
            "parameters": 2,
            "doc_present": true,
            "complexity": 7,
            "line_span": [
              63,
              78
            ]
          },
          {
            "name": "EvaluateCandidate",
            "parameters": 2,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              84,
              99
            ]
          }
        ],
        "doc_lines": 18,
        "complexity_total": 19,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 47,
        "sloc": 41,
        "classes": [
          "HalfspaceCone"
        ],
        "methods": [
          {
            "name": "IsPointInHalfspace",
            "parameters": 3,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              16,
              19
            ]
          },
          {
            "name": "IsDirectionFeasible",
            "parameters": 3,
            "doc_present": true,
            "complexity": 4,
            "line_span": [
              25,
              33
            ]
          },
          {
            "name": "FindConeBoundary",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              39,
              41
            ]
          }
        ],
        "doc_lines": 12,
        "complexity_total": 6,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/Hashing.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 103,
        "sloc": 92,
        "classes": [
          "Hashing"
        ],
        "methods": [
          {
            "name": "ForAssembly",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              16,
              24
            ]
          },
          {
            "name": "ForContacts",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              27,
              30
            ]
          },
          {
            "name": "ForGraphs",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              33,
              36
            ]
          },
          {
            "name": "ForMotion",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              39,
              42
            ]
          },
          {
            "name": "ForConstraints",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              45,
              48
            ]
          },
          {
            "name": "ForSolver",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              51,
              54
            ]
          },
          {
            "name": "ForCentroid",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              60,
              66
            ]
          },
          {
            "name": "ForArea",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              72,
              76
            ]
          },
          {
            "name": "ForPlane",
            "parameters": 2,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              82,
              91
            ]
          },
          {
            "name": "ComputeHash",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              94,
              99
            ]
          }
        ],
        "doc_lines": 12,
        "complexity_total": 11,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/JsonSerializer.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 278,
        "sloc": 248,
        "classes": [
          "JsonSerializer",
          "SerializationOptions",
          "SerializationException",
          "Point3dConverter",
          "Vector3dConverter",
          "PlaneConverter",
          "BoundingBoxConverter",
          "GuidConverter"
        ],
        "methods": [
          {
            "name": "JsonSerializer",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              17,
              33
            ]
          },
          {
            "name": "Serialize",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              44,
              80
            ]
          },
          {
            "name": "SaveToFile",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              95,
              98
            ]
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              119,
              126
            ]
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "doc_present": false,
            "complexity": 7,
            "line_span": [
              129,
              147
            ]
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              150,
              151
            ]
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              155,
              162
            ]
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "doc_present": false,
            "complexity": 7,
            "line_span": [
              165,
              183
            ]
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              186,
              187
            ]
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              191,
              197
            ]
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "doc_present": false,
            "complexity": 6,
            "line_span": [
              200,
              217
            ]
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              220,
              221
            ]
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              225,
              231
            ]
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "doc_present": false,
            "complexity": 6,
            "line_span": [
              234,
              251
            ]
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              254,
              255
            ]
          },
          {
            "name": "WriteJson",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              259,
              261
            ]
          },
          {
            "name": "ReadJson",
            "parameters": 4,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              264,
              266
            ]
          },
          {
            "name": "CanConvert",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              269,
              270
            ]
          }
        ],
        "doc_lines": 3,
        "complexity_total": 40,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/ParallelProcessor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 196,
        "sloc": 176,
        "classes": [
          "ParallelProcessor",
          "ParallelProcessingConfig"
        ],
        "methods": [
          {
            "name": "IsParallelProcessingSupported",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              163,
              165
            ]
          },
          {
            "name": "GetRecommendedParallelism",
            "parameters": 1,
            "doc_present": true,
            "complexity": 5,
            "line_span": [
              171,
              177
            ]
          }
        ],
        "doc_lines": 24,
        "complexity_total": 6,
        "await_count": 3
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/PerformanceMonitor.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 224,
        "sloc": 199,
        "classes": [
          "PerformanceMonitor",
          "PerformanceMonitorHelper"
        ],
        "methods": [
          {
            "name": "PerformanceMonitor",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              21,
              24
            ]
          },
          {
            "name": "StartTimer",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              31,
              34
            ]
          },
          {
            "name": "StopTimer",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              41,
              49
            ]
          },
          {
            "name": "GetDuration",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              57,
              59
            ]
          },
          {
            "name": "LogDebug",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              66,
              70
            ]
          },
          {
            "name": "GenerateReport",
            "parameters": 0,
            "doc_present": true,
            "complexity": 3,
            "line_span": [
              77,
              105
            ]
          },
          {
            "name": "GetStatistics",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              112,
              126
            ]
          },
          {
            "name": "Reset",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              132,
              135
            ]
          },
          {
            "name": "GetOperationNames",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              141,
              143
            ]
          },
          {
            "name": "IsRunning",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              151,
              153
            ]
          },
          {
            "name": "GetRunningOperations",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              160,
              162
            ]
          },
          {
            "name": "GetMonitor",
            "parameters": 1,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              178,
              184
            ]
          },
          {
            "name": "RemoveMonitor",
            "parameters": 1,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              191,
              193
            ]
          },
          {
            "name": "ClearAll",
            "parameters": 0,
            "doc_present": true,
            "complexity": 1,
            "line_span": [
              199,
              201
            ]
          },
          {
            "name": "GenerateGlobalReport",
            "parameters": 0,
            "doc_present": true,
            "complexity": 2,
            "line_span": [
              208,
              221
            ]
          }
        ],
        "doc_lines": 66,
        "complexity_total": 20,
        "await_count": 0
      },
      {
        "path": "src/AssemblyChain.Core/Toolkit/Utils/Tolerance.cs",
        "namespace": "AssemblyChain.Core.Toolkit.Utils",
        "loc": 171,
        "sloc": 150,
        "classes": [
          "Tolerance",
          "ToleranceSettings",
          "ToleranceContext"
        ],
        "methods": [
          {
            "name": "GetAdaptiveTolerance",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              37,
              40
            ]
          },
          {
            "name": "GetAdaptiveTolerance",
            "parameters": 1,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              43,
              47
            ]
          },
          {
            "name": "Equal",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              50,
              53
            ]
          },
          {
            "name": "IsZero",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              56,
              59
            ]
          },
          {
            "name": "PointsEqual",
            "parameters": 3,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              62,
              65
            ]
          },
          {
            "name": "VectorsParallel",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              68,
              73
            ]
          },
          {
            "name": "PlanesCoplanar",
            "parameters": 3,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              76,
              82
            ]
          },
          {
            "name": "IsSignificantArea",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              85,
              87
            ]
          },
          {
            "name": "IsSignificantVolume",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              90,
              92
            ]
          },
          {
            "name": "RoundToTolerance",
            "parameters": 2,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              95,
              98
            ]
          },
          {
            "name": "ToleranceContext",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              104,
              107
            ]
          },
          {
            "name": "Dispose",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              109,
              111
            ]
          },
          {
            "name": "CreateContext",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              115,
              117
            ]
          },
          {
            "name": "CreateRobustContext",
            "parameters": 1,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              120,
              136
            ]
          },
          {
            "name": "ValidateSettings",
            "parameters": 2,
            "doc_present": false,
            "complexity": 2,
            "line_span": [
              139,
              157
            ]
          },
          {
            "name": "GetDescription",
            "parameters": 0,
            "doc_present": false,
            "complexity": 1,
            "line_span": [
              160,
              165
            ]
          }
        ],
        "doc_lines": 6,
        "complexity_total": 21,
        "await_count": 0
      }
    ],
    "dependencies": {
      "AssemblyChain.Core.Contact": [
        "AssemblyChain.Core.Contact.Detection.BroadPhase",
        "AssemblyChain.Core.Contact.Detection.NarrowPhase",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Graph",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Contact.Detection.BroadPhase": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Contact.Detection.NarrowPhase": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "AssemblyChain.Core.Toolkit",
        "AssemblyChain.Core.Toolkit.Geometry",
        "AssemblyChain.Core.Toolkit.Mesh",
        "AssemblyChain.Core.Toolkit.Utils",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.Entities": [
        "AssemblyChain.Core.Domain.Common",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Domain.ValueObjects",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.Interfaces": [
        "AssemblyChain.Core.Domain.Entities"
      ],
      "AssemblyChain.Core.Domain.Services": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Domain.Interfaces",
        "AssemblyChain.Core.Domain.ValueObjects",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Domain.ValueObjects": [
        "AssemblyChain.Core.Domain.Common",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Graph": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Model": [
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Toolkit.Utils",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Motion": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Solver": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.BBox": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Brep": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Geometry": [
        "AssemblyChain.Core.Contact",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Intersection": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Model",
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Math": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Mesh": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Mesh.Preprocessing": [
        "Rhino.Geometry"
      ],
      "AssemblyChain.Core.Toolkit.Utils": [
        "AssemblyChain.Core.Contact",
        "AssemblyChain.Core.Domain.Entities",
        "AssemblyChain.Core.Model",
        "Newtonsoft.Json",
        "Newtonsoft.Json.Converters",
        "Rhino.Geometry"
      ]
    },
    "duplicates": [
      {
        "hash": "a527f72edc762058d20eed7155817c4f",
        "lines": [
          "        {",
          "            public List<(int i, int j)> CandidatePairs { get; set; } = new List<(int, int)>();",
          "            public TimeSpan ExecutionTime { get; set; }",
          "            public int TotalPairs { get; set; }",
          "            public double ReductionRatio { get; set; }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 26
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 86
          }
        ]
      },
      {
        "hash": "75a4f7db60f6084350fc175d4fa9c9a0",
        "lines": [
          "                    }",
          "                }",
          "                result.CandidatePairs = candidatePairs.ToList();",
          "                result.TotalPairs = boundingBoxes.Count * (boundingBoxes.Count - 1) / 2;",
          "                result.ReductionRatio = result.TotalPairs > 0 ?"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 68
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 133
          }
        ]
      },
      {
        "hash": "161cc9ba1dc9cd5300c8722c3cab0715",
        "lines": [
          "                }",
          "                result.CandidatePairs = candidatePairs.ToList();",
          "                result.TotalPairs = boundingBoxes.Count * (boundingBoxes.Count - 1) / 2;",
          "                result.ReductionRatio = result.TotalPairs > 0 ?",
          "                    (double)result.CandidatePairs.Count / result.TotalPairs : 0.0;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 69
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 134
          }
        ]
      },
      {
        "hash": "14ffce51dbf8134ce1b9b60edad45df1",
        "lines": [
          "                stopwatch.Stop();",
          "                result.ExecutionTime = stopwatch.Elapsed;",
          "            }",
          "            catch (Exception ex)",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 75
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 139
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 70
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 170
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 288
          }
        ]
      },
      {
        "hash": "1fab13113c1b89abd1695bdb538112bd",
        "lines": [
          "                result.ExecutionTime = stopwatch.Elapsed;",
          "            }",
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 76
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 140
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 71
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 171
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 289
          }
        ]
      },
      {
        "hash": "64c49f0ace5ec4412b309fb887002c82",
        "lines": [
          "            }",
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();",
          "                result.ExecutionTime = stopwatch.Elapsed;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 77
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 141
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 72
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 172
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 290
          }
        ]
      },
      {
        "hash": "5cd67261a6dd7caaf32fe88cd9f09505",
        "lines": [
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();",
          "                result.ExecutionTime = stopwatch.Elapsed;",
          "                // Log error but don't throw - return empty result"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 78
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 142
          }
        ]
      },
      {
        "hash": "e599255c277d409caf5687a4f2a86e09",
        "lines": [
          "        {",
          "            var boundingBoxes = meshes.Select(m => m?.GetBoundingBox(true) ?? BoundingBox.Empty).ToList();",
          "            return Execute(boundingBoxes, options);",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 127
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 204
          }
        ]
      },
      {
        "hash": "fcb6e6a23341326745cabd94db952820",
        "lines": [
          "        {",
          "            var boundingBoxes = breps.Select(b => b?.GetBoundingBox(true) ?? BoundingBox.Empty).ToList();",
          "            return Execute(boundingBoxes, options);",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 135
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 212
          }
        ]
      },
      {
        "hash": "eb8dfbf25eb254405f34d89755b6c5fc",
        "lines": [
          "        {",
          "            var boundingBoxes = geometries.Select(g => g?.GetBoundingBox(true) ?? BoundingBox.Empty).ToList();",
          "            return Execute(boundingBoxes, options);",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/RTreeBroadPhase.cs",
            "start_line": 143
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 220
          }
        ]
      },
      {
        "hash": "c76fdca58a23c1e4a1d97c72d1a106d1",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Graph/GNNAnalyzer.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "f1a02beb092f0f4d818d7eb2f79dad71",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/BroadPhase/SweepAndPrune.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "c0113ea0e48f295eb23a983edf9ff59e",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Model;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/ContactDetection.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "ee8fdaed2e8db8f7d874cf32f8d2f1ba",
        "lines": [
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "6d6d1729fab10bd30a3741be3e342b7c",
        "lines": [
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 4
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
            "start_line": 5
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 4
          }
        ]
      },
      {
        "hash": "39ab3ae8f102ad40087ae4e693a4687f",
        "lines": [
          "using AssemblyChain.Core.Domain.Entities;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;",
          "namespace AssemblyChain.Core.Contact.Detection.NarrowPhase"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 5
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 5
          }
        ]
      },
      {
        "hash": "5ebb573585d9ac71a086caa109815ebe",
        "lines": [
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;",
          "namespace AssemblyChain.Core.Contact.Detection.NarrowPhase",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 6
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 6
          }
        ]
      },
      {
        "hash": "9e47acfb93f2d4750cc1a7b1825adab3",
        "lines": [
          "using AssemblyChain.Core.Contact;",
          "using AssemblyChain.Core.Toolkit;",
          "namespace AssemblyChain.Core.Contact.Detection.NarrowPhase",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 7
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 7
          }
        ]
      },
      {
        "hash": "7ebd5ea251db657f80f7204ec6df9964",
        "lines": [
          "            Part partA, Part partB, DetectionOptions options)",
          "        {",
          "            var contacts = new List<ContactData>();",
          "            // \u9a8c\u8bc1\u8f93\u5165",
          "            if (!partA.HasValidGeometry || !partB.HasValidGeometry)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 20
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 20
          }
        ]
      },
      {
        "hash": "65f6ee5bb1a563f2669dca26a1c687a5",
        "lines": [
          "        {",
          "            var contacts = new List<ContactData>();",
          "            // \u9a8c\u8bc1\u8f93\u5165",
          "            if (!partA.HasValidGeometry || !partB.HasValidGeometry)",
          "                return contacts;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/BrepContactDetector.cs",
            "start_line": 21
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MixedGeoContactDetector.cs",
            "start_line": 21
          }
        ]
      },
      {
        "hash": "3d5c1c80dcad839996805c9fa7816142",
        "lines": [
          "                    }",
          "                }",
          "            }",
          "            catch (Exception ex)",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
            "start_line": 445
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
            "start_line": 520
          },
          {
            "file": "src/AssemblyChain.Core/Contact/Detection/NarrowPhase/MeshContactDetector.cs",
            "start_line": 556
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 126
          }
        ]
      },
      {
        "hash": "57bba1a2b9cc01ecb90f723c787e1c16",
        "lines": [
          "        /// </summary>",
          "        public void UpdateName(string name)",
          "        {",
          "            if (string.IsNullOrWhiteSpace(name))",
          "                throw new ArgumentException(\"Name cannot be empty\", nameof(name));"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 84
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Part.cs",
            "start_line": 87
          }
        ]
      },
      {
        "hash": "1e0487706d85504054f9d9119d7b241d",
        "lines": [
          "        public void UpdateName(string name)",
          "        {",
          "            if (string.IsNullOrWhiteSpace(name))",
          "                throw new ArgumentException(\"Name cannot be empty\", nameof(name));",
          "            Name = name;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 85
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Part.cs",
            "start_line": 88
          }
        ]
      },
      {
        "hash": "f3a8025f7d0b9c86c0c0302a8fbac5f9",
        "lines": [
          "        {",
          "            if (string.IsNullOrWhiteSpace(name))",
          "                throw new ArgumentException(\"Name cannot be empty\", nameof(name));",
          "            Name = name;",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 86
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Part.cs",
            "start_line": 89
          }
        ]
      },
      {
        "hash": "f794f4629d40fb096ddc06c08344896b",
        "lines": [
          "            if (string.IsNullOrWhiteSpace(name))",
          "                throw new ArgumentException(\"Name cannot be empty\", nameof(name));",
          "            Name = name;",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Assembly.cs",
            "start_line": 87
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Entities/Part.cs",
            "start_line": 90
          }
        ]
      },
      {
        "hash": "816f9a162bb24c29bd2c60c4168be785",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Threading.Tasks;",
          "using AssemblyChain.Core.Domain.Entities;",
          "namespace AssemblyChain.Core.Domain.Interfaces",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Interfaces/IAssemblyService.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Interfaces/IPartRepository.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "17ef999beab669316138e6ba1648df52",
        "lines": [
          "using System.Threading.Tasks;",
          "using AssemblyChain.Core.Domain.Entities;",
          "namespace AssemblyChain.Core.Domain.Interfaces",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/Interfaces/IAssemblyService.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Domain/Interfaces/IPartRepository.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "2cda96bab3ddd169278ed8ef0178f1cc",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using AssemblyChain.Core.Domain.Common;",
          "namespace AssemblyChain.Core.Domain.ValueObjects",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Domain/ValueObjects/PhysicsProperties.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "2f00d3c9c07821377af307c5a12e0270",
        "lines": [
          "using System.Collections.Generic;",
          "using AssemblyChain.Core.Domain.Common;",
          "namespace AssemblyChain.Core.Domain.ValueObjects",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Domain/ValueObjects/MaterialProperties.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Domain/ValueObjects/PhysicsProperties.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "3e145d11d3777fee06d90c661c955cf1",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using Rhino.Geometry;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Model/SolverModel.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "fe05d355ab1992737fc8879c2037bd4e",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Model/SolverModel.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "c19ca0d7b099682d48429162309651b3",
        "lines": [
          "using System.Linq;",
          "using AssemblyChain.Core.Domain.Entities;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Model/SolverModel.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "241cf67a5884034dae06265e49984488",
        "lines": [
          "using AssemblyChain.Core.Domain.Entities;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/AssemblyModel.cs",
            "start_line": 4
          },
          {
            "file": "src/AssemblyChain.Core/Model/SolverModel.cs",
            "start_line": 4
          }
        ]
      },
      {
        "hash": "90f167e58c9a7a0333455a0c4fffa8d5",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/ConstraintModel.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Model/GraphModel.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Model/MotionModel.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "62fa93f70d373184cdf2e243b57b25c0",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/ConstraintModel.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Model/GraphModel.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Model/MotionModel.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "594c91de9c02bce20d07f7d6818a1828",
        "lines": [
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Model",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Model/ConstraintModel.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Model/GraphModel.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Model/MotionModel.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "36791db1994c1f1d6e8fb404efdd7b2e",
        "lines": [
          "    {",
          "        /// <summary>",
          "        /// Checks if a point is inside a halfspace defined by a normal and origin.",
          "        /// </summary>",
          "        public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 11
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 11
          }
        ]
      },
      {
        "hash": "20b390836908e95d8160d246506fc2f3",
        "lines": [
          "        /// <summary>",
          "        /// Checks if a point is inside a halfspace defined by a normal and origin.",
          "        /// </summary>",
          "        public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "        {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 12
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 12
          }
        ]
      },
      {
        "hash": "e375b18b39f279791573e7faefd531bd",
        "lines": [
          "        /// Checks if a point is inside a halfspace defined by a normal and origin.",
          "        /// </summary>",
          "        public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "        {",
          "            var vector = point - origin;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 13
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 13
          }
        ]
      },
      {
        "hash": "50a17577b0f6c3a0b33b3e3c0d3f764b",
        "lines": [
          "        /// </summary>",
          "        public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "        {",
          "            var vector = point - origin;",
          "            return Vector3d.Multiply(vector, normal) >= 0;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 14
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 14
          }
        ]
      },
      {
        "hash": "9dbf305169f574965a727ff6bdfe7cc1",
        "lines": [
          "        public static bool IsPointInHalfspace(Point3d point, Vector3d normal, Point3d origin)",
          "        {",
          "            var vector = point - origin;",
          "            return Vector3d.Multiply(vector, normal) >= 0;",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 15
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 15
          }
        ]
      },
      {
        "hash": "797ce49b9da1c68d8e298c2db7ef4f5d",
        "lines": [
          "        {",
          "            var vector = point - origin;",
          "            return Vector3d.Multiply(vector, normal) >= 0;",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 16
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 16
          }
        ]
      },
      {
        "hash": "9bb013363200e3138017f5374277b370",
        "lines": [
          "        /// </summary>",
          "        public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "        {",
          "            if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "            foreach (var normal in constraintNormals)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 22
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 22
          }
        ]
      },
      {
        "hash": "03b9b8eb6cf0f4c66cb0118bcd9516e3",
        "lines": [
          "        public static bool IsDirectionFeasible(Vector3d direction, IReadOnlyList<Vector3d> constraintNormals, double tolerance = 1e-9)",
          "        {",
          "            if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "            foreach (var normal in constraintNormals)",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 23
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 23
          }
        ]
      },
      {
        "hash": "b93e5d78f96a16e6c1d48b38ed4c02ae",
        "lines": [
          "        {",
          "            if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "            foreach (var normal in constraintNormals)",
          "            {",
          "                var dot = Vector3d.Multiply(direction, normal);"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 24
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 24
          }
        ]
      },
      {
        "hash": "aa8e05cfe0761c7edc4cc9b275e887eb",
        "lines": [
          "            if (constraintNormals == null || constraintNormals.Count == 0) return true;",
          "            foreach (var normal in constraintNormals)",
          "            {",
          "                var dot = Vector3d.Multiply(direction, normal);",
          "                if (dot < -tolerance) return false;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 25
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 25
          }
        ]
      },
      {
        "hash": "9581c86d73c8b6cfdcd96a93cab9b0b2",
        "lines": [
          "            foreach (var normal in constraintNormals)",
          "            {",
          "                var dot = Vector3d.Multiply(direction, normal);",
          "                if (dot < -tolerance) return false;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 26
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 26
          }
        ]
      },
      {
        "hash": "f88bd82df346bcdb484590a1f089bfd8",
        "lines": [
          "            {",
          "                var dot = Vector3d.Multiply(direction, normal);",
          "                if (dot < -tolerance) return false;",
          "            }",
          "            return true;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 27
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 27
          }
        ]
      },
      {
        "hash": "59ad9e5906b3648fb7f4ca3f99487afe",
        "lines": [
          "                var dot = Vector3d.Multiply(direction, normal);",
          "                if (dot < -tolerance) return false;",
          "            }",
          "            return true;",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 28
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 28
          }
        ]
      },
      {
        "hash": "d77cc9108c96e8e32cff1ea596292bdf",
        "lines": [
          "                if (dot < -tolerance) return false;",
          "            }",
          "            return true;",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 29
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 29
          }
        ]
      },
      {
        "hash": "e2ea5d61bdca27840ba9ca0af8869df7",
        "lines": [
          "        /// </summary>",
          "        public static IReadOnlyList<Vector3d> FindConeBoundary(IReadOnlyList<Vector3d> constraintNormals)",
          "        {",
          "            return (constraintNormals ?? Array.Empty<Vector3d>()).ToList();",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/ConeIntersection.cs",
            "start_line": 35
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 35
          }
        ]
      },
      {
        "hash": "b4487359e3d40262c39d651a7767614c",
        "lines": [
          "            var indices = new int[size];",
          "            for (int i = 0; i < size; i++) indices[i] = i;",
          "            while (true)",
          "            {",
          "                yield return indices.Select(i => items[i]).ToArray();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 88
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 60
          }
        ]
      },
      {
        "hash": "1357be153fd16198968004054ae14141",
        "lines": [
          "            for (int i = 0; i < size; i++) indices[i] = i;",
          "            while (true)",
          "            {",
          "                yield return indices.Select(i => items[i]).ToArray();",
          "                int j = size - 1;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 89
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 61
          }
        ]
      },
      {
        "hash": "e5f9f38c986e98e100c9f36171b5c0c4",
        "lines": [
          "            while (true)",
          "            {",
          "                yield return indices.Select(i => items[i]).ToArray();",
          "                int j = size - 1;",
          "                while (j >= 0 && indices[j] == items.Count - size + j) j--;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 90
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 62
          }
        ]
      },
      {
        "hash": "a621786adbef7c95f84ebabba106fe11",
        "lines": [
          "            {",
          "                yield return indices.Select(i => items[i]).ToArray();",
          "                int j = size - 1;",
          "                while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "                if (j < 0) yield break;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 91
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 63
          }
        ]
      },
      {
        "hash": "dbaa0c50971ddf95f6cb2a4392c1e879",
        "lines": [
          "                yield return indices.Select(i => items[i]).ToArray();",
          "                int j = size - 1;",
          "                while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "                if (j < 0) yield break;",
          "                indices[j]++;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 92
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 64
          }
        ]
      },
      {
        "hash": "a5a05560e2b4ab4bcac1dcd3c771e863",
        "lines": [
          "                int j = size - 1;",
          "                while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "                if (j < 0) yield break;",
          "                indices[j]++;",
          "                for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 93
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 65
          }
        ]
      },
      {
        "hash": "b507bf50c0824033add2b110352cacf3",
        "lines": [
          "                while (j >= 0 && indices[j] == items.Count - size + j) j--;",
          "                if (j < 0) yield break;",
          "                indices[j]++;",
          "                for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 94
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 66
          }
        ]
      },
      {
        "hash": "5bcc9fa5f30516641553a04fd9406811",
        "lines": [
          "                if (j < 0) yield break;",
          "                indices[j]++;",
          "                for (int k = j + 1; k < size; k++) indices[k] = indices[k - 1] + 1;",
          "            }",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Motion/MotionEvaluator.cs",
            "start_line": 95
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/GroupCandidates.cs",
            "start_line": 67
          }
        ]
      },
      {
        "hash": "2c075f860eef9190b35a208cd29d74d5",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Diagnostics;",
          "using System.Linq;",
          "using AssemblyChain.Core.Model;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "76d2ac466acac7a49705053f3a1b5682",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Diagnostics;",
          "using System.Linq;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "73e2f2c5cfab019d7ff62575b12f7f98",
        "lines": [
          "using System.Diagnostics;",
          "using System.Linq;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "ce1c2ae3b7e1c87c2f2ff19ea90fd836",
        "lines": [
          "using System.Linq;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Solver"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 4
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 4
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 4
          }
        ]
      },
      {
        "hash": "dda394838452e2a35ceb31fa43845cc1",
        "lines": [
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Solver",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 5
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 5
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 5
          }
        ]
      },
      {
        "hash": "04ce2fa3842ba0ab008499de4599da80",
        "lines": [
          "    {",
          "        public DgSolverModel Solve(",
          "            AssemblyModel assembly,",
          "            ContactModel contacts,",
          "            ConstraintModel constraints,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 19
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 15
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 15
          }
        ]
      },
      {
        "hash": "6d435249794d89221644c53ef7d94d9e",
        "lines": [
          "        public DgSolverModel Solve(",
          "            AssemblyModel assembly,",
          "            ContactModel contacts,",
          "            ConstraintModel constraints,",
          "            object options = null)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 20
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 16
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 16
          }
        ]
      },
      {
        "hash": "c5e4393fb8289b28acccd5e1fdab00f7",
        "lines": [
          "            AssemblyModel assembly,",
          "            ContactModel contacts,",
          "            ConstraintModel constraints,",
          "            object options = null)",
          "        {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 21
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 17
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 17
          }
        ]
      },
      {
        "hash": "341a9b29c738202de3f91fee8c73b401",
        "lines": [
          "            ContactModel contacts,",
          "            ConstraintModel constraints,",
          "            object options = null)",
          "        {",
          "            var stopwatch = Stopwatch.StartNew();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 22
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 18
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 18
          }
        ]
      },
      {
        "hash": "262188f4c14fe149260082c761633525",
        "lines": [
          "            ConstraintModel constraints,",
          "            object options = null)",
          "        {",
          "            var stopwatch = Stopwatch.StartNew();",
          "            try"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 23
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 19
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 19
          }
        ]
      },
      {
        "hash": "496e21432aac521af122dffc29d16122",
        "lines": [
          "            object options = null)",
          "        {",
          "            var stopwatch = Stopwatch.StartNew();",
          "            try",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 24
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 20
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 20
          }
        ]
      },
      {
        "hash": "17b0b7a4fa579fb860e0d47387cbef79",
        "lines": [
          "                var steps = new List<Step>();",
          "                var vectors = new List<Vector3d>();",
          "                var groups = new List<IReadOnlyList<int>>();",
          "                var result = new DgSolverModel(",
          "                    steps,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 30
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 25
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 25
          }
        ]
      },
      {
        "hash": "c82eaa7227e48f0679cbbc57f6a98c62",
        "lines": [
          "                var vectors = new List<Vector3d>();",
          "                var groups = new List<IReadOnlyList<int>>();",
          "                var result = new DgSolverModel(",
          "                    steps,",
          "                    vectors,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 31
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 26
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 26
          }
        ]
      },
      {
        "hash": "1440bc95f4f6c931c248d53c887df593",
        "lines": [
          "                var groups = new List<IReadOnlyList<int>>();",
          "                var result = new DgSolverModel(",
          "                    steps,",
          "                    vectors,",
          "                    groups,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 32
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 27
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 27
          }
        ]
      },
      {
        "hash": "fdba41840724058d4e03604b263d31af",
        "lines": [
          "                var result = new DgSolverModel(",
          "                    steps,",
          "                    vectors,",
          "                    groups,",
          "                    isFeasible: false,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 33
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 28
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 28
          }
        ]
      },
      {
        "hash": "4ccbd2ab8a2415931780453df21ec878",
        "lines": [
          "                    steps,",
          "                    vectors,",
          "                    groups,",
          "                    isFeasible: false,",
          "                    isOptimal: false,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 34
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 29
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 29
          }
        ]
      },
      {
        "hash": "9267d99b758d6f3cc4d812cf02fb4bd6",
        "lines": [
          "                    metadata: new Dictionary<string, object>()",
          "                );",
          "                stopwatch.Stop();",
          "                return result;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 42
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 37
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 37
          }
        ]
      },
      {
        "hash": "07e4d9aa30fbf4f757f2d623967f3941",
        "lines": [
          "                );",
          "                stopwatch.Stop();",
          "                return result;",
          "            }",
          "            catch (Exception ex)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 43
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 38
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 38
          }
        ]
      },
      {
        "hash": "c0e789461ea9e5b6e244859f37cd1f32",
        "lines": [
          "                stopwatch.Stop();",
          "                return result;",
          "            }",
          "            catch (Exception ex)",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 44
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 39
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 39
          }
        ]
      },
      {
        "hash": "e6ad1f698769d8700fb5ea47371ccf5c",
        "lines": [
          "                return result;",
          "            }",
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 45
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 40
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 40
          }
        ]
      },
      {
        "hash": "515a615ac906cdb4e73f1b11f42c3aef",
        "lines": [
          "                return new DgSolverModel(",
          "                    new List<Step>(),",
          "                    new List<Vector3d>(),",
          "                    new List<IReadOnlyList<int>>(),",
          "                    isFeasible: false,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 51
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 45
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 45
          }
        ]
      },
      {
        "hash": "de0102839fbbf6177f816ac37b243d27",
        "lines": [
          "                    new List<Step>(),",
          "                    new List<Vector3d>(),",
          "                    new List<IReadOnlyList<int>>(),",
          "                    isFeasible: false,",
          "                    isOptimal: false,"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 52
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 46
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 46
          }
        ]
      },
      {
        "hash": "adf38ec6dd5e5d61fe71e4420c26cf10",
        "lines": [
          "                    metadata: new Dictionary<string, object>()",
          "                );",
          "            }",
          "        }",
          "    }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 60
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 54
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 54
          }
        ]
      },
      {
        "hash": "31d03e0f8a2669dd196ad0e04786b62c",
        "lines": [
          "                );",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/CSPSolver.cs",
            "start_line": 61
          },
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 55
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 55
          }
        ]
      },
      {
        "hash": "f6ed2487ac08e38a105a2af4abf70d19",
        "lines": [
          "using AssemblyChain.Core.Contact;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Solver",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 6
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 6
          }
        ]
      },
      {
        "hash": "c9ad4728f38f5d11aa63834a9aa9f65b",
        "lines": [
          "        {",
          "            var stopwatch = Stopwatch.StartNew();",
          "            try",
          "            {",
          "                var steps = new List<Step>();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 21
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 21
          }
        ]
      },
      {
        "hash": "250ac9dc9dfb5bc7c90221993df2545e",
        "lines": [
          "            var stopwatch = Stopwatch.StartNew();",
          "            try",
          "            {",
          "                var steps = new List<Step>();",
          "                var vectors = new List<Vector3d>();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 22
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 22
          }
        ]
      },
      {
        "hash": "4d317248e598aa9ef9856f13954d92ae",
        "lines": [
          "            try",
          "            {",
          "                var steps = new List<Step>();",
          "                var vectors = new List<Vector3d>();",
          "                var groups = new List<IReadOnlyList<int>>();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 23
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 23
          }
        ]
      },
      {
        "hash": "77e42c8750b065da2125cdf64735d7ec",
        "lines": [
          "            {",
          "                var steps = new List<Step>();",
          "                var vectors = new List<Vector3d>();",
          "                var groups = new List<IReadOnlyList<int>>();",
          "                var result = new DgSolverModel("
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 24
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 24
          }
        ]
      },
      {
        "hash": "8818dd30f8bb6f039d0a5b417a9794f6",
        "lines": [
          "            }",
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();",
          "                return new DgSolverModel("
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 41
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 41
          }
        ]
      },
      {
        "hash": "db3227259cde43b6e41e0739d71d7b3e",
        "lines": [
          "            catch (Exception ex)",
          "            {",
          "                stopwatch.Stop();",
          "                return new DgSolverModel(",
          "                    new List<Step>(),"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 42
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 42
          }
        ]
      },
      {
        "hash": "58d93bb1f0b095119ed3e045204db80f",
        "lines": [
          "            {",
          "                stopwatch.Stop();",
          "                return new DgSolverModel(",
          "                    new List<Step>(),",
          "                    new List<Vector3d>(),"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 43
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 43
          }
        ]
      },
      {
        "hash": "1c1deed9528b2a6343db36382045bac9",
        "lines": [
          "                stopwatch.Stop();",
          "                return new DgSolverModel(",
          "                    new List<Step>(),",
          "                    new List<Vector3d>(),",
          "                    new List<IReadOnlyList<int>>(),"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Solver/MILPSolver.cs",
            "start_line": 44
          },
          {
            "file": "src/AssemblyChain.Core/Solver/SATSolver.cs",
            "start_line": 44
          }
        ]
      },
      {
        "hash": "d4f34b66cf8c82239cb9724119ef91cb",
        "lines": [
          "                result.Success = false;",
          "                return result;",
          "            }",
          "            try",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 45
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 47
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 45
          }
        ]
      },
      {
        "hash": "5ff521a05c773df722a5a7da991d1277",
        "lines": [
          "                }",
          "                result.Success = result.Errors.Count == 0;",
          "            }",
          "            catch (Exception ex)",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 81
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 80
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
            "start_line": 65
          }
        ]
      },
      {
        "hash": "da14ec91ee1d0387d22e7ba8672cd156",
        "lines": [
          "                result.Success = false;",
          "            }",
          "            return result;",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 87
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 80
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 78
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 178
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 296
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 76
          }
        ]
      },
      {
        "hash": "7bf83eb52602759a2f1e58edaec3801c",
        "lines": [
          "            }",
          "            catch",
          "            {",
          "                return null;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 228
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 99
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 138
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 246
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs",
            "start_line": 181
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 185
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 90
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 107
          }
        ]
      },
      {
        "hash": "f5ff64e313ea6e4269b89a7129440d8a",
        "lines": [
          "            catch",
          "            {",
          "                return null;",
          "            }",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 229
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 100
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 139
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 247
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs",
            "start_line": 182
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 186
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 91
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 108
          }
        ]
      },
      {
        "hash": "4f2d2e261c1153691fde18b23fb5bfd8",
        "lines": [
          "            {",
          "                return null;",
          "            }",
          "        }",
          "        /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/BrepUtilities.cs",
            "start_line": 230
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 101
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 140
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/PlaneOperations.cs",
            "start_line": 183
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 187
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 92
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshToBrep.cs",
            "start_line": 109
          }
        ]
      },
      {
        "hash": "eba128964928d11a6e5740a952358291",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "using AssemblyChain.Core.Model;",
          "using AssemblyChain.Core.Contact;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Brep/PlanarOps.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "f0cf64279a244bbce340f02fc1b2f9ca",
        "lines": [
          "        {",
          "            var vertices = new List<Point3d>",
          "            {",
          "                mesh.Vertices[face.A],",
          "                mesh.Vertices[face.B],"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 22
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 169
          }
        ]
      },
      {
        "hash": "f3c300213f3eac3590e58ddf0d9f0a42",
        "lines": [
          "            var vertices = new List<Point3d>",
          "            {",
          "                mesh.Vertices[face.A],",
          "                mesh.Vertices[face.B],",
          "                mesh.Vertices[face.C]"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 23
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 170
          }
        ]
      },
      {
        "hash": "428f8218f50fe7b17746e7cb334d7165",
        "lines": [
          "            {",
          "                mesh.Vertices[face.A],",
          "                mesh.Vertices[face.B],",
          "                mesh.Vertices[face.C]",
          "            };"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 24
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 171
          }
        ]
      },
      {
        "hash": "abb09948cad9cfda3bea32d03a35dc97",
        "lines": [
          "                mesh.Vertices[face.A],",
          "                mesh.Vertices[face.B],",
          "                mesh.Vertices[face.C]",
          "            };",
          "            if (face.IsQuad)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 25
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 172
          }
        ]
      },
      {
        "hash": "d0f7b335fba9239f157c2d12e89de5f1",
        "lines": [
          "                mesh.Vertices[face.B],",
          "                mesh.Vertices[face.C]",
          "            };",
          "            if (face.IsQuad)",
          "                vertices.Add(mesh.Vertices[face.D]);"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 26
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 173
          }
        ]
      },
      {
        "hash": "542854619efd68613596e5fd7b972d97",
        "lines": [
          "                mesh.Vertices[face.C]",
          "            };",
          "            if (face.IsQuad)",
          "                vertices.Add(mesh.Vertices[face.D]);",
          "            var center = Point3d.Origin;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 27
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 174
          }
        ]
      },
      {
        "hash": "848a0460b08c14ca76ce7b1d29fb73a0",
        "lines": [
          "            };",
          "            if (face.IsQuad)",
          "                vertices.Add(mesh.Vertices[face.D]);",
          "            var center = Point3d.Origin;",
          "            foreach (var v in vertices)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 28
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 175
          }
        ]
      },
      {
        "hash": "9b5fdcb25ccec6578843b09537d5e446",
        "lines": [
          "            if (face.IsQuad)",
          "                vertices.Add(mesh.Vertices[face.D]);",
          "            var center = Point3d.Origin;",
          "            foreach (var v in vertices)",
          "                center += v;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 29
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 176
          }
        ]
      },
      {
        "hash": "9afdcd5fd37e73de079286912e7282d6",
        "lines": [
          "                vertices.Add(mesh.Vertices[face.D]);",
          "            var center = Point3d.Origin;",
          "            foreach (var v in vertices)",
          "                center += v;",
          "            center /= vertices.Count;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 30
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 177
          }
        ]
      },
      {
        "hash": "211ef3068338a4771e5b637fc90daf5d",
        "lines": [
          "            var center = Point3d.Origin;",
          "            foreach (var v in vertices)",
          "                center += v;",
          "            center /= vertices.Count;",
          "            return center;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 31
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 178
          }
        ]
      },
      {
        "hash": "65d05d5ae28d052331f2a6d986c7a116",
        "lines": [
          "            foreach (var v in vertices)",
          "                center += v;",
          "            center /= vertices.Count;",
          "            return center;",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 32
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/MeshSpatialIndex.cs",
            "start_line": 179
          }
        ]
      },
      {
        "hash": "d2e4ecac78c5ecd5d0ba95877fa01178",
        "lines": [
          "        {",
          "            try",
          "            {",
          "                var vertices = new Point3d[] {",
          "                    mesh.Vertices[face.A],"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 44
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 381
          }
        ]
      },
      {
        "hash": "8cca5ede99805f4a68336be4844fe5f2",
        "lines": [
          "            try",
          "            {",
          "                var vertices = new Point3d[] {",
          "                    mesh.Vertices[face.A],",
          "                    mesh.Vertices[face.B],"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 45
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 382
          }
        ]
      },
      {
        "hash": "eaa1d2a3b88ab224c9b8cf2cab301838",
        "lines": [
          "            {",
          "                var vertices = new Point3d[] {",
          "                    mesh.Vertices[face.A],",
          "                    mesh.Vertices[face.B],",
          "                    mesh.Vertices[face.C]"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 46
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 383
          }
        ]
      },
      {
        "hash": "b0152ec8241ce428ef04ccce1bd8f4f9",
        "lines": [
          "                var vertices = new Point3d[] {",
          "                    mesh.Vertices[face.A],",
          "                    mesh.Vertices[face.B],",
          "                    mesh.Vertices[face.C]",
          "                };"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 47
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 384
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
            "start_line": 246
          }
        ]
      },
      {
        "hash": "e240b098a8f8d4333dd5943684b86fb0",
        "lines": [
          "                    mesh.Vertices[face.A],",
          "                    mesh.Vertices[face.B],",
          "                    mesh.Vertices[face.C]",
          "                };",
          "                if (face.IsQuad)"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 48
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 385
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
            "start_line": 247
          }
        ]
      },
      {
        "hash": "38c2d0df54491de1f5db7569e6145cfb",
        "lines": [
          "                    mesh.Vertices[face.B],",
          "                    mesh.Vertices[face.C]",
          "                };",
          "                if (face.IsQuad)",
          "                {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 49
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 386
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
            "start_line": 248
          }
        ]
      },
      {
        "hash": "22b9e178cef8992840fbced33c9cc6c2",
        "lines": [
          "                }",
          "            }",
          "            catch",
          "            {",
          "                return 0.0;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 63
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 407
          }
        ]
      },
      {
        "hash": "bfa12d25f3eb3749eb35b4165bb9d360",
        "lines": [
          "            }",
          "            catch",
          "            {",
          "                return 0.0;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 64
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 408
          }
        ]
      },
      {
        "hash": "cd02b6e438016e8b55b8812ed8799178",
        "lines": [
          "            catch",
          "            {",
          "                return 0.0;",
          "            }",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Geometry/MeshGeometry.cs",
            "start_line": 65
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 409
          }
        ]
      },
      {
        "hash": "0aa9b59dc2a9da14431bfbabe482eec4",
        "lines": [
          "    {",
          "        /// <summary>",
          "        /// Intersection options.",
          "        /// </summary>",
          "        public class IntersectionOptions"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 11
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 13
          }
        ]
      },
      {
        "hash": "cafc18d7b652a54c3ff4c72915ff6293",
        "lines": [
          "        /// <summary>",
          "        /// Intersection options.",
          "        /// </summary>",
          "        public class IntersectionOptions",
          "        {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 12
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 14
          }
        ]
      },
      {
        "hash": "e5a8e7585919e46bb1abfccce646cedd",
        "lines": [
          "        /// Intersection options.",
          "        /// </summary>",
          "        public class IntersectionOptions",
          "        {",
          "            public double Tolerance { get; set; } = 1e-6;"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 13
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 15
          }
        ]
      },
      {
        "hash": "1c825ce14d3641a00926ee77123c6a3b",
        "lines": [
          "        }",
          "        /// <summary>",
          "        /// Intersection result.",
          "        /// </summary>",
          "        public class IntersectionResult"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 22
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 25
          }
        ]
      },
      {
        "hash": "7ed5f01bf7749933a6f5871ae74b89a1",
        "lines": [
          "        /// <summary>",
          "        /// Intersection result.",
          "        /// </summary>",
          "        public class IntersectionResult",
          "        {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 23
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 26
          }
        ]
      },
      {
        "hash": "3916f6662f7ab39e386d0e9615fe6122",
        "lines": [
          "            IntersectionOptions options = null)",
          "        {",
          "            options ??= new IntersectionOptions();",
          "            var result = new IntersectionResult();",
          "            var stopwatch = System.Diagnostics.Stopwatch.StartNew();"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 42
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 113
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 260
          }
        ]
      },
      {
        "hash": "34c547c762f60eaccc29af90dc356e67",
        "lines": [
          "        {",
          "            options ??= new IntersectionOptions();",
          "            var result = new IntersectionResult();",
          "            var stopwatch = System.Diagnostics.Stopwatch.StartNew();",
          "            try"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 43
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 114
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 261
          }
        ]
      },
      {
        "hash": "fd5656ff0a7239db03aa56a1da1cda06",
        "lines": [
          "            options ??= new IntersectionOptions();",
          "            var result = new IntersectionResult();",
          "            var stopwatch = System.Diagnostics.Stopwatch.StartNew();",
          "            try",
          "            {"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 44
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 115
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 262
          }
        ]
      },
      {
        "hash": "af55a768b56ebbbd0fd60b709de5c238",
        "lines": [
          "            }",
          "            catch",
          "            {",
          "                return false;",
          "            }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 169
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 340
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
            "start_line": 307
          }
        ]
      },
      {
        "hash": "0f455c736849f648ab02ed8c1cbc3973",
        "lines": [
          "            catch",
          "            {",
          "                return false;",
          "            }",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 170
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 341
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
            "start_line": 308
          }
        ]
      },
      {
        "hash": "222db099db624b58bca05ca8ebb8c7cd",
        "lines": [
          "                    results.Add(result);",
          "                }",
          "            }",
          "            return results;",
          "        }"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/BrepBrepIntersect.cs",
            "start_line": 262
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Intersection/MeshMeshIntersect.cs",
            "start_line": 238
          }
        ]
      },
      {
        "hash": "6c19bc7bccf767f561c61c5ff40d1fb6",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Math"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/Clustering.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/ConvexCone.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/LinearAlgebra.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "2b1613319ec6b2336d2910f964559ba4",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Math",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/Clustering.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/ConvexCone.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/LinearAlgebra.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "6f1929a43502cea136157934876013c1",
        "lines": [
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Math",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/Clustering.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/ConvexCone.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Math/LinearAlgebra.cs",
            "start_line": 3
          }
        ]
      },
      {
        "hash": "9ca9f848201b43a9ba61dbc4dd2d8617",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "1ac0cf339bf3ace6cf311916d0b45ae9",
        "lines": [
          "using System.Collections.Generic;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Mesh.Preprocessing",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshOptimizer.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshRepair.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Mesh/Preprocessing/MeshValidator.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "c652e6614d629d752e9fa29130f9a990",
        "lines": [
          "using System;",
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Utils"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs",
            "start_line": 1
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 1
          }
        ]
      },
      {
        "hash": "54b5d1631208938520081f0840fb9c4d",
        "lines": [
          "using System.Collections.Generic;",
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Utils",
          "{"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs",
            "start_line": 2
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 2
          }
        ]
      },
      {
        "hash": "728de37e4792032577d5a7f93a5c0061",
        "lines": [
          "using System.Linq;",
          "using Rhino.Geometry;",
          "namespace AssemblyChain.Core.Toolkit.Utils",
          "{",
          "    /// <summary>"
        ],
        "occurrences": [
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/ExtremeRayExtractor.cs",
            "start_line": 3
          },
          {
            "file": "src/AssemblyChain.Core/Toolkit/Utils/HalfspaceCone.cs",
            "start_line": 3
          }
        ]
      }
    ]
  }
}
